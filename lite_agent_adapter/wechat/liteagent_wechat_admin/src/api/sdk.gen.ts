// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { DeleteAgentWxRefData, DeleteAgentWxRefResponses, DeleteAgentWxRefErrors, ListStarredAgentsData, ListStarredAgentsResponses, ListStarredAgentsErrors, CreateAgentWxRefData, CreateAgentWxRefResponses, CreateAgentWxRefErrors, UpdateAgentWxRefData, UpdateAgentWxRefResponses, UpdateAgentWxRefErrors, ReceiveData, ReceiveResponses, ReceiveErrors, Receive1Data, Receive1Responses, Receive1Errors, RefreshTokenData, RefreshTokenResponses, RefreshTokenErrors, LogoutData, LogoutResponses, LogoutErrors, GetVersionInfoData, GetVersionInfoResponses, GetVersionInfoErrors, GetUserInfoData, GetUserInfoResponses, GetUserInfoErrors, LoginData, LoginResponses, LoginErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * 删除Agent与服务号绑定
 * 删除一个Agent与服务号的绑定
 */
export const deleteAgentWxRef = <ThrowOnError extends boolean = false>(options: Options<DeleteAgentWxRefData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAgentWxRefResponses, DeleteAgentWxRefErrors, ThrowOnError>({
        url: '/api/agentWxRef/agentRef',
        ...options
    });
};

/**
 * 获取Agent与服务号绑定列表
 */
export const listStarredAgents = <ThrowOnError extends boolean = false>(options: Options<ListStarredAgentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListStarredAgentsResponses, ListStarredAgentsErrors, ThrowOnError>({
        url: '/api/agentWxRef/agentRef',
        ...options
    });
};

/**
 * 创建Agent与服务号绑定
 * 创建一个新的Agent与服务号的绑定
 */
export const createAgentWxRef = <ThrowOnError extends boolean = false>(options: Options<CreateAgentWxRefData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAgentWxRefResponses, CreateAgentWxRefErrors, ThrowOnError>({
        url: '/api/agentWxRef/agentRef',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 更新Agent与服务号绑定
 * 更新一个Agent与服务号的绑定
 */
export const updateAgentWxRef = <ThrowOnError extends boolean = false>(options: Options<UpdateAgentWxRefData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateAgentWxRefResponses, UpdateAgentWxRefErrors, ThrowOnError>({
        url: '/api/agentWxRef/agentRef',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 接收微信消息 提供给微信验证消息的确来自微信服务器
 * 接收微信消息 提供给微信验证消息的确来自微信服务器
 */
export const receive = <ThrowOnError extends boolean = false>(options: Options<ReceiveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReceiveResponses, ReceiveErrors, ThrowOnError>({
        url: '/api/notify/revice/{appId}',
        ...options
    });
};

/**
 * 接收微信消息 接收用户发送过来的消息
 * 接收微信消息 接收用户发送过来的消息
 */
export const receive1 = <ThrowOnError extends boolean = false>(options: Options<Receive1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<Receive1Responses, Receive1Errors, ThrowOnError>({
        url: '/api/notify/revice/{appId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 刷新令牌
 * 使用刷新令牌获取新的访问令牌
 */
export const refreshToken = <ThrowOnError extends boolean = false>(options?: Options<RefreshTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RefreshTokenResponses, RefreshTokenErrors, ThrowOnError>({
        url: '/api/auth/refresh',
        ...options
    });
};

/**
 * 用户登出
 * 用户登出系统
 */
export const logout = <ThrowOnError extends boolean = false>(options?: Options<LogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LogoutResponses, LogoutErrors, ThrowOnError>({
        url: '/api/auth/logout',
        ...options
    });
};

/**
 * 获取版本号
 * 可用于测试服务通断
 */
export const getVersionInfo = <ThrowOnError extends boolean = false>(options?: Options<GetVersionInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetVersionInfoResponses, GetVersionInfoErrors, ThrowOnError>({
        url: '/api/version',
        ...options
    });
};

/**
 * 获取当前登录用户信息
 * 获取用户信息
 */
export const getUserInfo = <ThrowOnError extends boolean = false>(options?: Options<GetUserInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserInfoResponses, GetUserInfoErrors, ThrowOnError>({
        url: '/api/auth/user/info',
        ...options
    });
};

/**
 * 用户登录
 * 管理员用户登陆
 */
export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LoginResponses, LoginErrors, ThrowOnError>({
        url: '/api/auth/login',
        ...options
    });
};