// This file is auto-generated by @hey-api/openapi-ts

export type RVoid = {
    code?: number;
    msg?: string;
    data?: unknown;
};

/**
 * agent与服务号绑定对象DTO
 */
export type AgentWxRefDto = {
    /**
     * 唯一标识
     */
    id?: string;
    /**
     * 关系名称
     */
    name: string;
    /**
     * AgentApiKey
     */
    agentApiKey: string;
    /**
     * AgentBaseUrl
     */
    agentBaseUrl: string;
    /**
     * 服务号的appId
     */
    appId: string;
    /**
     * 服务号的appSecret
     */
    appSecret: string;
    /**
     * 服务号的 token
     */
    token: string;
    /**
     * 服务号的消息加密密钥
     */
    aesKey: string;
    /**
     * 创建时间
     */
    createTime?: string;
    /**
     * 更新时间
     */
    updateTime?: string;
};

export type RObject = {
    code?: number;
    msg?: string;
    data?: unknown;
};

export type RString = {
    code?: number;
    msg?: string;
    data?: string;
};

export type RSaTokenInfo = {
    code?: number;
    msg?: string;
    data?: SaTokenInfo;
};

export type SaTokenInfo = {
    tokenName?: string;
    tokenValue?: string;
    isLogin?: boolean;
    loginId?: unknown;
    loginType?: string;
    tokenTimeout?: number;
    sessionTimeout?: number;
    tokenSessionTimeout?: number;
    tokenActiveTimeout?: number;
    loginDeviceType?: string;
    tag?: string;
};

export type PageResultAgentWxRefDto = {
    pageNum?: number;
    pageSize?: number;
    totalSize?: number;
    totalPages?: number;
    contentData?: Array<AgentWxRefDto>;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    firstPage?: boolean;
    lastPage?: boolean;
};

export type RPageResultAgentWxRefDto = {
    code?: number;
    msg?: string;
    data?: PageResultAgentWxRefDto;
};

export type DeleteAgentWxRefData = {
    body?: never;
    path?: never;
    query: {
        Id: string;
    };
    url: '/api/agentWxRef/agentRef';
};

export type DeleteAgentWxRefErrors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type DeleteAgentWxRefError = DeleteAgentWxRefErrors[keyof DeleteAgentWxRefErrors];

export type DeleteAgentWxRefResponses = {
    /**
     * OK
     */
    200: RObject;
};

export type DeleteAgentWxRefResponse = DeleteAgentWxRefResponses[keyof DeleteAgentWxRefResponses];

export type ListStarredAgentsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * 当前页
         */
        pageNum: number;
        /**
         * 每页数量，最大100
         */
        pageSize: number;
        /**
         * 查找内容
         */
        search: string;
    };
    url: '/api/agentWxRef/agentRef';
};

export type ListStarredAgentsErrors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type ListStarredAgentsError = ListStarredAgentsErrors[keyof ListStarredAgentsErrors];

export type ListStarredAgentsResponses = {
    /**
     * OK
     */
    200: RPageResultAgentWxRefDto;
};

export type ListStarredAgentsResponse = ListStarredAgentsResponses[keyof ListStarredAgentsResponses];

export type CreateAgentWxRefData = {
    body: AgentWxRefDto;
    path?: never;
    query?: never;
    url: '/api/agentWxRef/agentRef';
};

export type CreateAgentWxRefErrors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type CreateAgentWxRefError = CreateAgentWxRefErrors[keyof CreateAgentWxRefErrors];

export type CreateAgentWxRefResponses = {
    /**
     * OK
     */
    200: RObject;
};

export type CreateAgentWxRefResponse = CreateAgentWxRefResponses[keyof CreateAgentWxRefResponses];

export type UpdateAgentWxRefData = {
    body: AgentWxRefDto;
    path?: never;
    query?: never;
    url: '/api/agentWxRef/agentRef';
};

export type UpdateAgentWxRefErrors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type UpdateAgentWxRefError = UpdateAgentWxRefErrors[keyof UpdateAgentWxRefErrors];

export type UpdateAgentWxRefResponses = {
    /**
     * OK
     */
    200: RObject;
};

export type UpdateAgentWxRefResponse = UpdateAgentWxRefResponses[keyof UpdateAgentWxRefResponses];

export type ReceiveData = {
    body?: never;
    path: {
        appId: string;
    };
    query?: {
        timestamp?: string;
        nonce?: string;
        signature?: string;
        echostr?: string;
    };
    url: '/api/notify/revice/{appId}';
};

export type ReceiveErrors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type ReceiveError = ReceiveErrors[keyof ReceiveErrors];

export type ReceiveResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type ReceiveResponse = ReceiveResponses[keyof ReceiveResponses];

export type Receive1Data = {
    body?: string;
    path: {
        appId: string;
    };
    query?: {
        timestamp?: string;
        nonce?: string;
        openid?: string;
        signature?: string;
        encrypt_type?: string;
        msg_signature?: string;
    };
    url: '/api/notify/revice/{appId}';
};

export type Receive1Errors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type Receive1Error = Receive1Errors[keyof Receive1Errors];

export type Receive1Responses = {
    /**
     * OK
     */
    200: Blob | File;
};

export type Receive1Response = Receive1Responses[keyof Receive1Responses];

export type RefreshTokenData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/refresh';
};

export type RefreshTokenErrors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type RefreshTokenError = RefreshTokenErrors[keyof RefreshTokenErrors];

export type RefreshTokenResponses = {
    /**
     * OK
     */
    200: RObject;
};

export type RefreshTokenResponse = RefreshTokenResponses[keyof RefreshTokenResponses];

export type LogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/logout';
};

export type LogoutErrors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type LogoutError = LogoutErrors[keyof LogoutErrors];

export type LogoutResponses = {
    /**
     * OK
     */
    200: RObject;
};

export type LogoutResponse = LogoutResponses[keyof LogoutResponses];

export type GetVersionInfoData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/version';
};

export type GetVersionInfoErrors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type GetVersionInfoError = GetVersionInfoErrors[keyof GetVersionInfoErrors];

export type GetVersionInfoResponses = {
    /**
     * OK
     */
    200: RString;
};

export type GetVersionInfoResponse = GetVersionInfoResponses[keyof GetVersionInfoResponses];

export type GetUserInfoData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/user/info';
};

export type GetUserInfoErrors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type GetUserInfoError = GetUserInfoErrors[keyof GetUserInfoErrors];

export type GetUserInfoResponses = {
    /**
     * OK
     */
    200: RObject;
};

export type GetUserInfoResponse = GetUserInfoResponses[keyof GetUserInfoResponses];

export type LoginData = {
    body?: never;
    path?: never;
    query: {
        username: string;
        password: string;
    };
    url: '/api/auth/login';
};

export type LoginErrors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type LoginError = LoginErrors[keyof LoginErrors];

export type LoginResponses = {
    /**
     * OK
     */
    200: RSaTokenInfo;
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type ClientOptions = {
    baseUrl: 'http://192.168.2.188:9082' | (string & {});
};