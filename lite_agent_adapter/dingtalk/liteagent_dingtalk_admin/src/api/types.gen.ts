// This file is auto-generated by @hey-api/openapi-ts

export type RVoid = {
    code?: number;
    msg?: string;
    data?: unknown;
};

export type Department = {
    departmentId?: number;
    departmentName?: string;
};

/**
 * Robot权限信息DTO
 */
export type RobotPermissionsDto = {
    /**
     * 权限ID
     */
    id?: string;
    /**
     * robotCode
     */
    robotCode: string;
    /**
     * 用户列表
     */
    userList?: Array<User>;
    /**
     * 部门列表
     */
    departmentList?: Array<Department>;
    /**
     * 创建时间
     */
    createTime?: string;
    /**
     * 更新时间
     */
    updateTime?: string;
};

export type User = {
    userId?: string;
    userName?: string;
};

export type RObject = {
    code?: number;
    msg?: string;
    data?: unknown;
};

/**
 * agent与机器人绑定对象DTO
 */
export type AgentRobotRefDto = {
    /**
     * 唯一标识
     */
    id?: string;
    /**
     * 关系名称
     */
    name: string;
    /**
     * AgentApiKey
     */
    agentApiKey: string;
    /**
     * AgentBaseUrl
     */
    agentBaseUrl: string;
    /**
     * 机器人code
     */
    robotCode: string;
    /**
     * 机器人应用的clientId
     */
    robotClientId: string;
    /**
     * 机器人应用的clientSecret
     */
    robotClientSecret: string;
    /**
     * 卡片模板Id
     */
    cardTemplateId: string;
    /**
     * 权限信息
     */
    robotPermissionsDTO?: RobotPermissionsDto;
    /**
     * 创建时间
     */
    createTime?: string;
    /**
     * 更新时间
     */
    updateTime?: string;
};

/**
 * 获取部门用户基础信息DTO
 */
export type GetDepartmentUserListDto = {
    /**
     * 分页查询的游标，最开始传0，后续传返回参数中的next_cursor值
     */
    cursor: number;
    /**
     * 部门ID，如果是根部门，该参数传1
     */
    deptId: number;
    /**
     * 机器人robotCode
     */
    robotCode: string;
    /**
     * 部门成员的排序规则
     */
    orderField?: string;
    /**
     * 分页长度，最大值100。
     */
    size: number;
};

export type ListUserSimpleResponse = {
    name?: string;
    userid?: string;
};

export type PageResult = {
    hasMore?: boolean;
    list?: Array<ListUserSimpleResponse>;
    nextCursor?: number;
};

export type RPageResult = {
    code?: number;
    msg?: string;
    data?: PageResult;
};

export type RString = {
    code?: number;
    msg?: string;
    data?: string;
};

export type RRobotPermissionsDto = {
    code?: number;
    msg?: string;
    data?: RobotPermissionsDto;
};

export type PageResultAgentRobotRefDto = {
    pageNum?: number;
    pageSize?: number;
    totalSize?: number;
    totalPages?: number;
    contentData?: Array<AgentRobotRefDto>;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    firstPage?: boolean;
    lastPage?: boolean;
};

export type RPageResultAgentRobotRefDto = {
    code?: number;
    msg?: string;
    data?: PageResultAgentRobotRefDto;
};

export type JsonConfig = {
    keyComparator?: unknown;
    ignoreError?: boolean;
    ignoreCase?: boolean;
    dateFormat?: string;
    ignoreNullValue?: boolean;
    transientSupport?: boolean;
    stripTrailingZeros?: boolean;
    checkDuplicate?: boolean;
    writeLongAsString?: boolean;
    /**
     * @deprecated
     */
    order?: boolean;
};

export type JsonObject = {
    raw?: {
        [key: string]: unknown;
    };
    config?: JsonConfig;
    empty?: boolean;
    [key: string]: unknown | {
        [key: string]: unknown;
    } | JsonConfig | boolean | undefined;
};

export type RListJsonObject = {
    code?: number;
    msg?: string;
    data?: Array<JsonObject>;
};

export type RSaTokenInfo = {
    code?: number;
    msg?: string;
    data?: SaTokenInfo;
};

export type SaTokenInfo = {
    tokenName?: string;
    tokenValue?: string;
    isLogin?: boolean;
    loginId?: unknown;
    loginType?: string;
    tokenTimeout?: number;
    sessionTimeout?: number;
    tokenSessionTimeout?: number;
    tokenActiveTimeout?: number;
    loginDeviceType?: string;
    tag?: string;
};

export type CreateRobotPermissionData = {
    body: RobotPermissionsDto;
    path?: never;
    query?: never;
    url: '/api/robot/permissions';
};

export type CreateRobotPermissionErrors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type CreateRobotPermissionError = CreateRobotPermissionErrors[keyof CreateRobotPermissionErrors];

export type CreateRobotPermissionResponses = {
    /**
     * OK
     */
    200: RObject;
};

export type CreateRobotPermissionResponse = CreateRobotPermissionResponses[keyof CreateRobotPermissionResponses];

export type UpdateAgentPermissionData = {
    body: RobotPermissionsDto;
    path?: never;
    query?: never;
    url: '/api/robot/permissions';
};

export type UpdateAgentPermissionErrors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type UpdateAgentPermissionError = UpdateAgentPermissionErrors[keyof UpdateAgentPermissionErrors];

export type UpdateAgentPermissionResponses = {
    /**
     * OK
     */
    200: RObject;
};

export type UpdateAgentPermissionResponse = UpdateAgentPermissionResponses[keyof UpdateAgentPermissionResponses];

export type DeleteAgentRobotRefData = {
    body?: never;
    path?: never;
    query: {
        robotCode: string;
    };
    url: '/api/robot/agentRef';
};

export type DeleteAgentRobotRefErrors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type DeleteAgentRobotRefError = DeleteAgentRobotRefErrors[keyof DeleteAgentRobotRefErrors];

export type DeleteAgentRobotRefResponses = {
    /**
     * OK
     */
    200: RObject;
};

export type DeleteAgentRobotRefResponse = DeleteAgentRobotRefResponses[keyof DeleteAgentRobotRefResponses];

export type ListStarredAgentsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * 当前页
         */
        pageNum: number;
        /**
         * 每页数量，最大100
         */
        pageSize: number;
        /**
         * 查找内容
         */
        search: string;
    };
    url: '/api/robot/agentRef';
};

export type ListStarredAgentsErrors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type ListStarredAgentsError = ListStarredAgentsErrors[keyof ListStarredAgentsErrors];

export type ListStarredAgentsResponses = {
    /**
     * OK
     */
    200: RPageResultAgentRobotRefDto;
};

export type ListStarredAgentsResponse = ListStarredAgentsResponses[keyof ListStarredAgentsResponses];

export type CreateAgentRobotRefData = {
    body: AgentRobotRefDto;
    path?: never;
    query?: never;
    url: '/api/robot/agentRef';
};

export type CreateAgentRobotRefErrors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type CreateAgentRobotRefError = CreateAgentRobotRefErrors[keyof CreateAgentRobotRefErrors];

export type CreateAgentRobotRefResponses = {
    /**
     * OK
     */
    200: RObject;
};

export type CreateAgentRobotRefResponse = CreateAgentRobotRefResponses[keyof CreateAgentRobotRefResponses];

export type UpdateAgentRobotRefData = {
    body: AgentRobotRefDto;
    path?: never;
    query?: never;
    url: '/api/robot/agentRef';
};

export type UpdateAgentRobotRefErrors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type UpdateAgentRobotRefError = UpdateAgentRobotRefErrors[keyof UpdateAgentRobotRefErrors];

export type UpdateAgentRobotRefResponses = {
    /**
     * OK
     */
    200: RObject;
};

export type UpdateAgentRobotRefResponse = UpdateAgentRobotRefResponses[keyof UpdateAgentRobotRefResponses];

export type GetVersionInfoData = {
    body: GetDepartmentUserListDto;
    path?: never;
    query?: never;
    url: '/api/department/user/list';
};

export type GetVersionInfoErrors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type GetVersionInfoError = GetVersionInfoErrors[keyof GetVersionInfoErrors];

export type GetVersionInfoResponses = {
    /**
     * OK
     */
    200: RPageResult;
};

export type GetVersionInfoResponse = GetVersionInfoResponses[keyof GetVersionInfoResponses];

export type RefreshTokenData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/refresh';
};

export type RefreshTokenErrors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type RefreshTokenError = RefreshTokenErrors[keyof RefreshTokenErrors];

export type RefreshTokenResponses = {
    /**
     * OK
     */
    200: RObject;
};

export type RefreshTokenResponse = RefreshTokenResponses[keyof RefreshTokenResponses];

export type LogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/logout';
};

export type LogoutErrors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type LogoutError = LogoutErrors[keyof LogoutErrors];

export type LogoutResponses = {
    /**
     * OK
     */
    200: RObject;
};

export type LogoutResponse = LogoutResponses[keyof LogoutResponses];

export type GetVersionInfo1Data = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/version';
};

export type GetVersionInfo1Errors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type GetVersionInfo1Error = GetVersionInfo1Errors[keyof GetVersionInfo1Errors];

export type GetVersionInfo1Responses = {
    /**
     * OK
     */
    200: RString;
};

export type GetVersionInfo1Response = GetVersionInfo1Responses[keyof GetVersionInfo1Responses];

export type GetAgentPermissionsData = {
    body?: never;
    path: {
        /**
         * robotCode
         */
        robotCode: string;
    };
    query?: never;
    url: '/api/robot/permissions/{robotCode}';
};

export type GetAgentPermissionsErrors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type GetAgentPermissionsError = GetAgentPermissionsErrors[keyof GetAgentPermissionsErrors];

export type GetAgentPermissionsResponses = {
    /**
     * OK
     */
    200: RRobotPermissionsDto;
};

export type GetAgentPermissionsResponse = GetAgentPermissionsResponses[keyof GetAgentPermissionsResponses];

export type GetVersionInfo2Data = {
    body?: never;
    path?: never;
    query: {
        deptId?: number;
        robotCode: string;
    };
    url: '/api/department/list';
};

export type GetVersionInfo2Errors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type GetVersionInfo2Error = GetVersionInfo2Errors[keyof GetVersionInfo2Errors];

export type GetVersionInfo2Responses = {
    /**
     * OK
     */
    200: RListJsonObject;
};

export type GetVersionInfo2Response = GetVersionInfo2Responses[keyof GetVersionInfo2Responses];

export type GetUserInfoData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/user/info';
};

export type GetUserInfoErrors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type GetUserInfoError = GetUserInfoErrors[keyof GetUserInfoErrors];

export type GetUserInfoResponses = {
    /**
     * OK
     */
    200: RObject;
};

export type GetUserInfoResponse = GetUserInfoResponses[keyof GetUserInfoResponses];

export type LoginData = {
    body?: never;
    path?: never;
    query: {
        username: string;
        password: string;
    };
    url: '/api/auth/login';
};

export type LoginErrors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type LoginError = LoginErrors[keyof LoginErrors];

export type LoginResponses = {
    /**
     * OK
     */
    200: RSaTokenInfo;
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type DeleteAgentPermissionData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/robot/permissions/{id}';
};

export type DeleteAgentPermissionErrors = {
    /**
     * Unauthorized
     */
    401: RVoid;
    /**
     * Forbidden
     */
    403: RVoid;
    /**
     * Internal Server Error
     */
    500: RVoid;
};

export type DeleteAgentPermissionError = DeleteAgentPermissionErrors[keyof DeleteAgentPermissionErrors];

export type DeleteAgentPermissionResponses = {
    /**
     * OK
     */
    200: RObject;
};

export type DeleteAgentPermissionResponse = DeleteAgentPermissionResponses[keyof DeleteAgentPermissionResponses];

export type ClientOptions = {
    baseUrl: 'http://192.168.2.188:9080' | (string & {});
};