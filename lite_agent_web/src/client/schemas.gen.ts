// This file is auto-generated by @hey-api/openapi-ts

export const $ResponseDataString = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      type: 'string',
      description: '响应数据对象',
    },
  },
} as const;

export const $ResponseData_String_AddAction = {
  type: 'object',
  properties: {
    code: {
      type: ['integer', 'null'],
      description: '状态码',
    },
    message: {
      type: ['string', 'null'],
      description: '响应信息',
    },
    data: {
      type: ['string', 'null'],
      description: '响应数据对象',
    },
  },
} as const;

export const $ToolDTO = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '工具id',
    },
    name: {
      type: 'string',
      description: '工具名称',
    },
    icon: {
      type: 'string',
      description: '',
    },
    description: {
      type: 'string',
      description: '描述',
    },
    createUser: {
      type: 'string',
      description: '创建人名称',
    },
    canEdit: {
      type: 'boolean',
      description: '是否能编辑',
      default: false,
    },
    canDelete: {
      type: 'boolean',
      description: '是否能删除',
      default: false,
    },
    functionList: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/FunctionVO',
        description: '',
      },
      description: '方法',
    },
  },
} as const;

export const $Account = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '',
    },
    name: {
      type: 'string',
      description: '昵称',
    },
    email: {
      type: 'string',
      description: '邮箱',
    },
    avatar: {
      type: 'string',
      description: '头像',
    },
    status: {
      type: 'integer',
      description: '账号状态',
    },
    createTime: {
      type: 'string',
      description: '',
    },
    updateTime: {
      type: 'string',
      description: '',
    },
    deleted: {
      type: 'string',
      description: '逻辑删除',
      default: '0',
    },
  },
} as const;

export const $AgentDTO = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '',
    },
    userId: {
      type: 'string',
      description: '创建者id',
    },
    createUser: {
      type: 'string',
      description: '创建人名称',
    },
    name: {
      type: 'string',
      description: 'agent名称',
    },
    icon: {
      type: 'string',
      description: '图标url',
    },
    description: {
      type: 'string',
      description: '描述,可空',
    },
    status: {
      type: 'integer',
      description: '是否已发布',
    },
    type: {
      type: 'integer',
      description: 'agent类型',
      enum: [0, 1, 2],
    },
    autoAgentFlag: {
      type: 'boolean',
      description: 'true-auto agent,false-非auto agent',
      default: false,
    },
    mode: {
      type: 'integer',
      description: '执行模式',
      enum: [0, 1, 2],
      default: 0,
    },
    datasetIds: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: '知识库id',
    },
  },
} as const;

export const $Dataset = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: 'id',
    },
    name: {
      type: 'string',
      description: '名称',
    },
    userId: {
      type: 'string',
      description: '创建者id',
    },
    workspaceId: {
      type: 'string',
      description: '工作空间id',
    },
    icon: {
      type: 'string',
      description: '图标',
    },
    description: {
      type: 'string',
      description: '描述',
    },
    shareFlag: {
      type: 'boolean',
      description: '分享标识',
      default: false,
    },
    dataSourceType: {
      type: 'string',
      description: '数据源类型: INPUT, FILE, HTML',
    },
    vectorCollectionName: {
      type: 'string',
      description: '向量库集合名称',
    },
    llmModelId: {
      type: 'string',
      description: '关联的大模型id',
    },
    embeddingModel: {
      type: 'string',
      description: 'embedding 模型',
    },
    embeddingModelProvider: {
      type: 'string',
      description: 'embedding 模型提供商',
    },
    retrievalTopK: {
      type: 'integer',
      description: '检索 TopK',
    },
    retrievalScoreThreshold: {
      type: 'number',
      description: '检索分数阈值',
    },
    apiUrl: {
      type: 'string',
      description: '分享给外部的apiUrl',
    },
    apiKey: {
      type: 'string',
      description: '分享给外部的apikey',
    },
    createTime: {
      type: 'string',
      description: '创建时间',
    },
    updateTime: {
      type: 'string',
      description: '更新时间',
    },
  },
} as const;

export const $WorkSpaceVO = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '工作空间id',
    },
    name: {
      type: 'string',
      description: '工作空间名字',
    },
    role: {
      type: 'string',
      description: '当前账号在里面的角色',
      enum: ['0', '1', '2', '3', 'ROLE_USER', 'ROLE_ADMIN_DEL', 'ROLE_DEVELOPER', 'ROLE_ADMIN'],
    },
  },
} as const;

export const $ResponseDataInteger = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      type: 'integer',
      description: '响应数据对象',
    },
  },
} as const;

export const $LlmModel = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '',
    },
    name: {
      type: 'string',
      description: '模型名称',
    },
    alias: {
      type: 'string',
      description: '别名(方便辨别)',
    },
    baseUrl: {
      type: 'string',
      description: '模型访问url',
    },
    apiKey: {
      type: 'string',
      description: '模型访问key',
    },
    userId: {
      type: 'string',
      description: '创建者id',
    },
    workspaceId: {
      type: 'string',
      description: '工作空间id',
    },
    type: {
      type: 'string',
      description: '模型类型: text, embedding, image, video...',
      default: 'LLM',
    },
    provider: {
      type: 'string',
      description: '模型供应商: openai, dashscope, deepseek, prm, others ...',
      default: 'openai',
    },
    fieldMapping: {
      type: 'string',
      description: '字段映射,JSON字符串格式(不兼容OpenAI的模型可以设置字段映射,后端请求时动态修改请求体)',
    },
    responseFormat: {
      type: 'string',
      description: `响应格式: wav, mp3, pcm...
默认wav`,
      default: 'wav',
    },
    maxTokens: {
      type: 'integer',
      description: '限制最大token',
    },
    autoAgent: {
      type: 'boolean',
      description: '是否支持auto agent使用',
      default: false,
    },
    toolInvoke: {
      type: 'boolean',
      description: '是否支持工具调用',
      default: false,
    },
    deepThink: {
      type: 'boolean',
      description: '是否支持深度思考',
      default: false,
    },
    createTime: {
      type: 'string',
      description: '',
    },
    updateTime: {
      type: 'string',
      description: '',
    },
    deleted: {
      type: 'string',
      description: '逻辑删除',
      default: '0',
    },
  },
} as const;

export const $ModelVOAddAction = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '',
    },
    alias: {
      type: 'string',
      description: '别名',
    },
    name: {
      type: 'string',
      description: '模型名字',
    },
    baseUrl: {
      type: 'string',
      description: '请求url',
    },
    apiKey: {
      type: 'string',
      description: '接口key',
    },
    maxTokens: {
      type: 'integer',
      description: '限制最大token',
      minimum: 1,
    },
    type: {
      type: 'string',
      description: '模型类型: text, embedding, image, video...',
    },
    provider: {
      type: 'string',
      description: '模型供应商: openai, dashscope, deepseek, prm, others ...',
      default: 'openai',
    },
    fieldMapping: {
      type: 'string',
      description: '字段映射,JSON字符串格式(不兼容OpenAI的模型可以设置字段映射,后端请求时动态修改请求体)',
    },
    responseFormat: {
      type: 'string',
      description: `响应格式: wav, mp3, pcm...
默认wav`,
      default: 'wav',
    },
    autoAgent: {
      type: 'boolean',
      description: '是否支持auto agent使用',
      default: false,
    },
    toolInvoke: {
      type: 'boolean',
      description: '是否支持工具调用',
      default: false,
    },
    deepThink: {
      type: 'boolean',
      description: '是否支持深度思考',
      default: false,
    },
  },
  required: ['alias', 'name', 'baseUrl', 'apiKey', 'type'],
} as const;

export const $ResponseDataListToolDTO = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ToolDTO',
        description: '工具管理列表返回数据',
      },
      description: '响应数据对象',
    },
  },
} as const;

export const $ResponseDataAccount = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/Account',
      description: '响应数据对象',
    },
  },
} as const;

export const $ResponseDataIterableAgent = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Agent',
        description: 'agents 数据表',
      },
      description: '响应数据对象',
    },
  },
} as const;

export const $ResponseDataListAgentDTO = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/AgentDTO',
        description: '列表返回',
      },
      description: '响应数据对象',
    },
  },
} as const;

export const $ResponseDataDataset = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/Dataset',
      description: '响应数据对象',
    },
  },
} as const;

export const $LocalAgentInfoDTO = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: 'agentId',
    },
    name: {
      type: 'string',
      description: 'agent名称',
    },
    description: {
      type: 'string',
      description: '描述',
    },
    prompt: {
      type: 'string',
      description: '提示词',
    },
    llmModelId: {
      type: 'string',
      description: '关联的大模型id',
    },
    toolIds: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: '关联的工具列表',
      default: 'Collections.emptyList()',
    },
    temperature: {
      type: 'number',
      description: '温度值',
    },
    topP: {
      type: 'number',
      description: '概率抽样的 p 值',
    },
    maxTokens: {
      type: 'integer',
      description: '最大 token 数',
    },
    toolFunctionList: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/FunctionVO',
        description: 'com.litevar.agent.base.dto.LocalAgentInfoDTO.FunctionVO',
      },
      description: '方法列表',
    },
    subAgentIds: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: '子agent(普通,分发,分思) id',
    },
    type: {
      type: 'integer',
      description: 'agent类型',
      enum: [0, 1, 2],
      default: 0,
    },
    mode: {
      type: 'integer',
      description: '执行模式',
      enum: [0, 1, 2],
      default: 0,
    },
    datasetIds: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: '知识库id',
    },
    createTime: {
      type: 'string',
      description: '创建时间',
    },
  },
  required: ['id', 'name', 'createTime'],
} as const;

export const $ResponseDataListWorkSpaceVO = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkSpaceVO',
        description: '',
      },
      description: '响应数据对象',
    },
  },
} as const;

export const $ResponseData_LlmModel_ = {
  type: 'object',
  properties: {
    code: {
      type: ['integer', 'null'],
      description: '状态码',
    },
    message: {
      type: ['string', 'null'],
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/LlmModel',
      description: '响应数据对象',
    },
  },
} as const;

export const $ToolProvider = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '',
    },
    userId: {
      type: 'string',
      description: '创建人',
    },
    workspaceId: {
      type: 'string',
      description: '工作空间id',
    },
    name: {
      type: 'string',
      description: '工具名称',
    },
    icon: {
      type: 'string',
      description: '',
    },
    description: {
      type: 'string',
      description: '描述',
    },
    schemaType: {
      type: 'integer',
      description: `schema类型:
1-openapi
2-jsonrpc
3-open_modbus`,
      enum: [1, 2, 3, 4, 5],
    },
    schemaStr: {
      type: 'string',
      description: '原始schema描述字符串, yml、json',
    },
    openSchemaStr: {
      type: 'string',
      description: 'open tool schema',
    },
    apiKey: {
      type: 'string',
      description: '调用工具的apiKey',
    },
    apiKeyType: {
      type: 'string',
      description: 'apiKey类型: Bearer、Basic',
    },
    autoAgent: {
      type: 'boolean',
      description: '是否支持auto agent使用',
      default: false,
    },
    createTime: {
      type: 'string',
      description: '',
    },
    updateTime: {
      type: 'string',
      description: '',
    },
    deleted: {
      type: 'string',
      description: '逻辑删除',
      default: '0',
    },
  },
} as const;

export const $Handler = {
  type: 'object',
  properties: {},
} as const;

export const $AgentSessionVO = {
  type: 'object',
  properties: {
    agentId: {
      type: 'string',
      description: '',
    },
    name: {
      type: 'string',
      description: 'agent名字',
    },
    createTime: {
      type: 'string',
      description: '',
    },
    localFlag: {
      type: 'boolean',
      description: 'true为本地,false为云端',
    },
  },
} as const;

export const $DatasetCreateForm = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      description: 'Dataset name',
    },
    icon: {
      type: 'string',
      description: 'Icon URL',
    },
    description: {
      type: 'string',
      description: 'Description',
    },
    llmModelId: {
      type: 'string',
      description: 'LlmModel id',
    },
    embeddingModel: {
      type: 'string',
      description: 'Embedding model name',
    },
    embeddingModelProvider: {
      type: 'string',
      description: 'Embedding model provider',
    },
    retrievalTopK: {
      type: 'integer',
      description: 'Number of top retrieval results',
      minimum: 1,
      maximum: 20,
      default: 10,
    },
    retrievalScoreThreshold: {
      type: 'number',
      description: 'Score threshold for retrieval results',
      minimum: 0,
      maximum: 1,
      default: 0.5,
    },
  },
  required: ['name', 'llmModelId', 'embeddingModel', 'retrievalTopK', 'retrievalScoreThreshold'],
} as const;

export const $AgentFunction = {
  type: 'object',
  properties: {
    functionId: {
      type: 'string',
      description: '',
    },
    mode: {
      type: 'integer',
      description: '执行模式',
      enum: [0, 1, 2],
    },
  },
} as const;

export const $ModelVO = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '',
    },
    name: {
      type: 'string',
      description: '模型名字',
    },
    baseUrl: {
      type: 'string',
      description: '请求url',
    },
    apiKey: {
      type: 'string',
      description: '接口key',
    },
    maxTokens: {
      type: 'integer',
      description: '限制最大token',
      minimum: 1,
    },
    type: {
      type: 'string',
      description: '模型类型: text, embedding, image, video...',
    },
  },
  required: ['name', 'baseUrl', 'apiKey', 'type'],
} as const;

export const $key = {
  type: 'object',
  properties: {},
} as const;

export const $WorkspaceMember = {
  type: 'object',
  properties: {
    id: {
      type: ['string', 'null'],
      description: '',
    },
    workspaceId: {
      type: ['string', 'null'],
      description: '空间id',
    },
    userId: {
      type: ['string', 'null'],
      description: '成员用户id',
    },
    email: {
      type: ['string', 'null'],
      description: '成员账号',
    },
    role: {
      type: ['integer', 'null'],
      description: '空间成员角色',
    },
    createTime: {
      type: ['string', 'null'],
      description: '加入时间',
    },
  },
} as const;

export const $WorkspaceMemberVO = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '成员id',
    },
    workspaceId: {
      type: 'string',
      description: '空间id',
    },
    userId: {
      type: 'string',
      description: '成员用户id',
    },
    name: {
      type: 'string',
      description: '昵称',
    },
    email: {
      type: 'string',
      description: '成员账号',
    },
    role: {
      type: 'integer',
      description: '空间成员角色',
    },
    createTime: {
      type: 'string',
      description: '加入时间',
    },
  },
} as const;

export const $ResponseData_String_UpdateAction = {
  type: 'object',
  properties: {
    code: {
      type: ['integer', 'null'],
      description: '状态码',
    },
    message: {
      type: ['string', 'null'],
      description: '响应信息',
    },
    data: {
      type: ['string', 'null'],
      description: '响应数据对象',
    },
  },
} as const;

export const $ResponseDataToolProvider = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/ToolProvider',
      description: '响应数据对象',
    },
  },
} as const;

export const $Object = {
  type: 'object',
  properties: {},
} as const;

export const $ResponseDataListAgentSessionVO = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/AgentSessionVO',
        description: '',
      },
      description: '响应数据对象',
    },
  },
} as const;

export const $DatasetsVO = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '',
    },
    name: {
      type: 'string',
      description: '',
    },
    userId: {
      type: 'string',
      description: '',
    },
    workspaceId: {
      type: 'string',
      description: '',
    },
    icon: {
      type: 'string',
      description: '',
    },
    description: {
      type: 'string',
      description: '',
    },
    shareFlag: {
      type: 'boolean',
      description: '',
    },
    embeddingModel: {
      type: 'string',
      description: '',
    },
    embeddingModelProvider: {
      type: 'string',
      description: '',
    },
    retrievalTopK: {
      type: 'integer',
      description: '',
    },
    retrievalScoreThreshold: {
      type: 'number',
      description: '',
    },
    apiUrl: {
      type: 'string',
      description: '',
    },
    apiKey: {
      type: 'string',
      description: '',
    },
    createTime: {
      type: 'string',
      description: '',
    },
    updateTime: {
      type: 'string',
      description: '',
    },
    docCount: {
      type: 'integer',
      description: 'Number of documents in the dataset',
      default: 0,
    },
    wordCount: {
      type: 'integer',
      description: 'Total word count in the dataset',
      default: 0,
    },
    agentCount: {
      type: 'integer',
      description: 'Number of agents using this dataset',
      default: 0,
    },
    canEdit: {
      type: 'boolean',
      description: '',
      default: false,
    },
    canDelete: {
      type: 'boolean',
      description: '',
      default: false,
    },
  },
} as const;

export const $ApiInfo = {
  type: 'object',
  properties: {
    apiKey: {
      type: 'string',
      description: '',
    },
    apiUrl: {
      type: 'string',
      description: '',
    },
  },
} as const;

export const $PageModelDataset = {
  type: 'object',
  properties: {
    pageNo: {
      type: 'integer',
      description: '当前第几页',
    },
    pageSize: {
      type: 'integer',
      description: '一页多少条记录',
    },
    total: {
      type: 'integer',
      description: '全部数据量',
      format: 'int64',
    },
    list: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Dataset',
        description: '知识库',
      },
      description: '数据',
    },
  },
} as const;

export const $Dict = {
  type: 'object',
  properties: {
    key: {
      $ref: '#/components/schemas/key',
    },
  },
} as const;

export const $Sort = {
  type: 'object',
  properties: {
    direction: {
      type: ['string', 'null'],
      description: '',
      enum: ['ASC', 'DESC'],
    },
    property: {
      type: ['string', 'null'],
      description: '',
    },
    ignoreCase: {
      type: ['boolean', 'null'],
      description: '',
    },
    nullHandling: {
      type: ['string', 'null'],
      description: '',
      enum: ['NATIVE', 'NULLS_FIRST', 'NULLS_LAST'],
    },
    ascending: {
      type: ['boolean', 'null'],
      description: 'Returns whether sorting for this property shall be ascending.',
    },
    descending: {
      type: ['boolean', 'null'],
      description: 'Returns whether sorting for this property shall be descending.',
    },
  },
} as const;

export const $PageModelWorkspaceMemberVO = {
  type: 'object',
  properties: {
    pageNo: {
      type: 'integer',
      description: '当前第几页',
    },
    pageSize: {
      type: 'integer',
      description: '一页多少条记录',
    },
    total: {
      type: 'integer',
      description: '全部数据量',
    },
    list: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkspaceMemberVO',
        description: '工作空间成员列表信息',
      },
      description: '数据',
    },
  },
} as const;

export const $ModelVOUpdateAction = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '',
    },
    alias: {
      type: 'string',
      description: '别名',
    },
    name: {
      type: 'string',
      description: '模型名字',
    },
    baseUrl: {
      type: 'string',
      description: '请求url',
    },
    apiKey: {
      type: 'string',
      description: '接口key',
    },
    maxTokens: {
      type: 'integer',
      description: '限制最大token',
      minimum: 1,
    },
    type: {
      type: 'string',
      description: '模型类型: text, embedding, image, video...',
    },
    provider: {
      type: 'string',
      description: '模型供应商: openai, dashscope, deepseek, prm, others ...',
      default: 'openai',
    },
    fieldMapping: {
      type: 'string',
      description: '字段映射,JSON字符串格式(不兼容OpenAI的模型可以设置字段映射,后端请求时动态修改请求体)',
    },
    responseFormat: {
      type: 'string',
      description: `响应格式: wav, mp3, pcm...
默认wav`,
      default: 'wav',
    },
    autoAgent: {
      type: 'boolean',
      description: '是否支持auto agent使用',
      default: false,
    },
    toolInvoke: {
      type: 'boolean',
      description: '是否支持工具调用',
      default: false,
    },
    deepThink: {
      type: 'boolean',
      description: '是否支持深度思考',
      default: false,
    },
  },
  required: ['id', 'alias', 'name', 'baseUrl', 'apiKey', 'type'],
} as const;

export const $MapString = {
  type: 'object',
  properties: {
    key: {
      type: 'string',
    },
  },
} as const;

export const $AgentVO = {
  type: 'object',
  properties: {
    agent: {
      $ref: '#/components/schemas/Agent',
      description: '',
    },
    model: {
      $ref: '#/components/schemas/LlmModel',
      description: '',
    },
    toolList: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ToolProvider',
        description: 'OpenApi provider entity',
      },
      description: '',
    },
  },
} as const;

export const $PageModelDatasetsVO = {
  type: 'object',
  properties: {
    pageNo: {
      type: 'integer',
      description: '当前第几页',
    },
    pageSize: {
      type: 'integer',
      description: '一页多少条记录',
    },
    total: {
      type: 'integer',
      description: '全部数据量',
      format: 'int64',
    },
    list: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/DatasetsVO',
        description: 'View Object for Dataset with additional statistics.',
      },
      description: '数据',
    },
  },
} as const;

export const $ResponseDataPageModelDataset = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/PageModelDataset',
      description: '响应数据对象',
    },
  },
} as const;

export const $ResponseDataDatasetsVO = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/DatasetsVO',
      description: '响应数据对象',
    },
  },
} as const;

export const $ResponseDataDict = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/Dict',
      description: '响应数据对象',
    },
  },
} as const;

export const $Pageable = {
  type: 'object',
  properties: {
    paged: {
      type: ['boolean', 'null'],
      description: 'Returns whether the current{@link Pageable} contains pagination information.',
    },
    unpaged: {
      type: ['boolean', 'null'],
      description: 'Returns whether the current{@link Pageable} does not contain pagination information.',
    },
    pageNumber: {
      type: ['integer', 'null'],
      description: 'Returns the page to be returned.',
    },
    pageSize: {
      type: ['integer', 'null'],
      description: 'Returns the number of items to be returned.',
    },
    offset: {
      type: ['integer', 'null'],
      description: 'Returns the offset to be taken according to the underlying page and page size.',
    },
    sort: {
      type: ['array', 'null'],
      items: {
        $ref: '#/components/schemas/Sort',
        description: 'org.springframework.data.domain.Sort',
      },
      description: 'Returns the sorting parameters.',
    },
  },
} as const;

export const $ResponseDataPageModelWorkspaceMemberVO = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/PageModelWorkspaceMemberVO',
      description: '响应数据对象',
    },
  },
} as const;

export const $ToolVO = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '工具id',
    },
    name: {
      type: 'string',
      description: '工具名称',
    },
    description: {
      type: 'string',
      description: '描述',
    },
    icon: {
      type: 'string',
      description: '图标',
    },
    schemaType: {
      type: 'integer',
      description: 'schema类型',
      enum: [1, 2, 3, 4, 5],
    },
    schemaStr: {
      type: 'string',
      description: 'schema文稿',
    },
    apiKeyType: {
      type: 'string',
      description: 'api key类型:Bearer、Basic',
    },
    apiKey: {
      type: 'string',
      description: 'api key 值',
    },
    autoAgent: {
      type: 'boolean',
      description: '是否支持auto agent使用',
      default: false,
    },
  },
  required: ['name'],
} as const;

export const $ToolVOAddAction = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '工具id',
    },
    name: {
      type: 'string',
      description: '工具名称',
    },
    description: {
      type: 'string',
      description: '描述',
    },
    icon: {
      type: 'string',
      description: '图标',
    },
    schemaType: {
      type: 'integer',
      description: 'schema类型',
      enum: [1, 2, 3, 4, 5],
    },
    schemaStr: {
      type: 'string',
      description: 'schema文稿',
    },
    apiKeyType: {
      type: 'string',
      description: 'api key类型:Bearer、Basic',
    },
    apiKey: {
      type: 'string',
      description: 'api key 值',
    },
    autoAgent: {
      type: 'boolean',
      description: '是否支持auto agent使用',
      default: false,
    },
  },
  required: ['name'],
} as const;

export const $MediaType = {
  type: 'object',
  properties: {
    type: {
      type: 'string',
      description: '',
    },
    subtype: {
      type: 'string',
      description: '',
    },
    parameters: {
      $ref: '#/components/schemas/MapString',
      description: '',
    },
    toStringValue: {
      type: ['string', 'null'],
      description: '',
    },
  },
} as const;

export const $ResponseDataAgentVO = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/AgentVO',
      description: '响应数据对象',
    },
  },
} as const;

export const $AgentDetailVO = {
  type: 'object',
  properties: {
    agent: {
      $ref: '#/components/schemas/Agent',
      description: '',
    },
    model: {
      $ref: '#/components/schemas/LlmModel',
      description: '',
    },
    functionList: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/FunctionVO',
        description: 'com.litevar.agent.base.vo.AgentDetailVO.FunctionVO',
      },
      description: '方法列表',
    },
    apiKeyList: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/AgentApiKey',
        description: 'agent分享给外部调用的api信息',
      },
      description: 'api key',
    },
    datasetList: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/DatasetVO',
        description: '',
      },
      description: '数据集列表',
    },
    canEdit: {
      type: 'boolean',
      description: '是否能编辑',
      default: false,
    },
    canDelete: {
      type: 'boolean',
      description: '是否能删除',
      default: false,
    },
    canRelease: {
      type: 'boolean',
      description: '是否能发布',
      default: false,
    },
  },
} as const;

export const $ResponseDataPageModelDatasetsVO = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/PageModelDatasetsVO',
      description: '响应数据对象',
    },
  },
} as const;

export const $Page_WorkspaceMember_ = {
  type: 'object',
  properties: {
    content: {
      type: ['array', 'null'],
      items: {
        $ref: '#/components/schemas/WorkspaceMember',
        description: '工作空间成员',
      },
      description: '',
      default: 'new ArrayList<>()',
    },
    pageable: {
      $ref: '#/components/schemas/Pageable',
      description: '',
    },
    total: {
      type: ['integer', 'null'],
      description: '',
    },
    empty: {
      type: ['boolean', 'null'],
      description: 'Returns whether the current{@link Streamable} is empty.',
    },
    number: {
      type: ['integer', 'null'],
    },
    size: {
      type: ['integer', 'null'],
    },
    numberOfElements: {
      type: ['integer', 'null'],
    },
    sort: {
      type: ['array', 'null'],
      items: {
        $ref: '#/components/schemas/Sort',
        description: 'org.springframework.data.domain.Sort',
      },
    },
    first: {
      type: ['boolean', 'null'],
    },
    last: {
      type: ['boolean', 'null'],
    },
    totalPages: {
      type: ['integer', 'null'],
    },
    totalElements: {
      type: ['integer', 'null'],
    },
  },
} as const;

export const $PageModel_LlmModel_ = {
  type: 'object',
  properties: {
    pageNo: {
      type: ['integer', 'null'],
      description: '当前第几页',
    },
    pageSize: {
      type: ['integer', 'null'],
      description: '一页多少条记录',
    },
    total: {
      type: ['integer', 'null'],
      description: '全部数据量',
    },
    list: {
      type: ['array', 'null'],
      items: {
        $ref: '#/components/schemas/LlmModel',
        description: '大语言模型表',
      },
      description: '数据',
    },
  },
} as const;

export const $DataWithMediaType = {
  type: 'object',
  properties: {
    data: {
      type: 'object',
      properties: {},
      description: '',
    },
    mediaType: {
      description: '',
      anyOf: [
        {
          description: '',
          $ref: '#/components/schemas/MediaType',
        },
        {
          type: 'null',
        },
      ],
    },
  },
} as const;

export const $ResponseDataAgentDetailVO = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/AgentDetailVO',
      description: '响应数据对象',
    },
  },
} as const;

export const $ResponseDataListDataset = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Dataset',
        description: '知识库',
      },
      description: '响应数据对象',
    },
  },
} as const;

export const $FunctionVO = {
  type: 'object',
  properties: {
    toolId: {
      type: 'string',
      description: '',
    },
    toolName: {
      type: 'string',
      description: '',
    },
    functionId: {
      type: 'string',
      description: '',
    },
    functionName: {
      type: 'string',
      description: '',
    },
    functionDesc: {
      type: 'string',
      description: '',
    },
    protocol: {
      type: 'string',
      description: '',
    },
    icon: {
      type: 'string',
      description: '',
    },
    mode: {
      type: 'integer',
      description: '',
      enum: [0, 1, 2],
    },
    requestMethod: {
      type: 'string',
      description: '',
    },
  },
} as const;

export const $FunctionVO1 = {
  type: 'object',
  properties: {
    toolId: {
      type: 'string',
      description: '',
    },
    toolName: {
      type: 'string',
      description: '',
    },
    functionId: {
      type: 'string',
      description: '',
    },
    functionName: {
      type: 'string',
      description: '',
    },
    functionDesc: {
      type: 'string',
      description: '',
    },
    protocol: {
      type: 'string',
      description: '',
    },
    icon: {
      type: 'string',
      description: '',
    },
    mode: {
      type: 'integer',
      description: '',
      enum: [0, 1, 2],
    },
    requestMethod: {
      type: 'string',
      description: '',
    },
  },
} as const;

export const $ResponseData_Page_WorkspaceMember__ = {
  type: 'object',
  properties: {
    code: {
      type: ['integer', 'null'],
      description: '状态码',
    },
    message: {
      type: ['string', 'null'],
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/Page«WorkspaceMember»',
      description: '响应数据对象',
    },
  },
} as const;

export const $ResponseData_PageModel_LlmModel__ = {
  type: 'object',
  properties: {
    code: {
      type: ['integer', 'null'],
      description: '状态码',
    },
    message: {
      type: ['string', 'null'],
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/PageModel«LlmModel»',
      description: '响应数据对象',
    },
  },
} as const;

export const $ToolVOUpdateAction = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '工具id',
    },
    name: {
      type: 'string',
      description: '工具名称',
    },
    description: {
      type: 'string',
      description: '描述',
    },
    icon: {
      type: 'string',
      description: '图标',
    },
    schemaType: {
      type: 'integer',
      description: 'schema类型',
      enum: [1, 2, 3, 4, 5],
    },
    schemaStr: {
      type: 'string',
      description: 'schema文稿',
    },
    apiKeyType: {
      type: 'string',
      description: 'api key类型:Bearer、Basic',
    },
    apiKey: {
      type: 'string',
      description: 'api key 值',
    },
    autoAgent: {
      type: 'boolean',
      description: '是否支持auto agent使用',
      default: false,
    },
  },
  required: ['id', 'name'],
} as const;

export const $Throwable = {
  type: 'object',
  properties: {
    detailMessage: {
      type: 'string',
      description: `Specific details about the Throwable.  For example, for
{@code FileNotFoundException}, this contains the name of
the file that could not be found.`,
    },
    cause: {
      $ref: '#/components/schemas/Throwable',
      description: `The throwable that caused this throwable to get thrown, or null if this
throwable was not caused by another throwable, or if the causative
throwable is unknown.  If this field is equal to this throwable itself,
it indicates that the cause of this throwable has not yet been
initialized.`,
      default: 'this',
    },
    stackTrace: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/StackTraceElement',
      },
      description: `The stack trace, as returned by{@link #getStackTrace()}.

The field is initialized to a zero-length array.  A{@code
    * null} value of this field indicates subsequent calls to{@link
    * #setStackTrace(StackTraceElement[])} and{@link
    * #fillInStackTrace()} will be no-ops.`,
      default: 'new StackTraceElement[0]',
    },
    suppressedExceptions: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Throwable',
        description: 'java.lang.Throwable',
      },
      description: `The list of suppressed exceptions, as returned by{@link
    * #getSuppressed()}.  The list is initialized to a zero-element
unmodifiable sentinel list.  When a serialized Throwable is
read in, if the{@code suppressedExceptions} field points to a
zero-element list, the field is reset to the sentinel value.`,
      default: 'Collections.emptyList()',
    },
  },
} as const;

export const $DatasetDocument = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '',
    },
    name: {
      type: 'string',
      description: '名称',
    },
    userId: {
      type: 'string',
      description: '创建者id',
    },
    workspaceId: {
      type: 'string',
      description: '工作空间id',
    },
    datasetId: {
      type: 'string',
      description: '',
    },
    dataSourceType: {
      type: 'string',
      description: '文档类型: INPUT, FILE, HTML',
    },
    filePath: {
      type: 'string',
      description: '文件路径',
    },
    content: {
      type: 'string',
      description: 'input content',
    },
    htmlUrl: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: 'HTML URL',
    },
    md5Hash: {
      type: 'string',
      description: 'MD5 hash of the document',
    },
    wordCount: {
      type: 'integer',
      description: 'document word count',
      default: 0,
    },
    tokenCount: {
      type: 'integer',
      description: 'document token count',
      default: 0,
    },
    chunkSize: {
      type: 'integer',
      description: 'default chunk size',
      default: 500,
    },
    separator: {
      type: 'string',
      description: 'default Separator to split the document.',
    },
    metadata: {
      type: 'string',
      description: 'Document metadata (JSON)',
    },
    enableFlag: {
      type: 'boolean',
      description: '分享开关',
      default: false,
    },
    embedStatus: {
      type: 'string',
      description: '文档向量化状态: PENDING, SUCCESS, FAILED',
      default: 'PENDING',
    },
    createTime: {
      type: 'string',
      description: '创建时间',
    },
    updateTime: {
      type: 'string',
      description: '更新时间',
    },
  },
} as const;

export const $StackTraceElement = {
  type: 'object',
  properties: {
    classLoaderName: {
      type: 'string',
      description: 'The name of the class loader.',
    },
    moduleName: {
      type: 'string',
      description: 'The module name.',
    },
    moduleVersion: {
      type: 'string',
      description: 'The module version.',
    },
    declaringClass: {
      type: 'string',
      description: 'The declaring class.',
    },
    methodName: {
      type: 'string',
      description: 'The method name.',
    },
    fileName: {
      type: 'string',
      description: 'The source file name.',
    },
    lineNumber: {
      type: 'integer',
      description: 'The source line number.',
    },
    format: {
      type: 'integer',
      description: 'Control to show full or partial module, package, and class names.',
      minimum: -127,
      maximum: 128,
      default: 0,
    },
  },
} as const;

export const $DatasetVO = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '数据集id',
    },
    name: {
      type: 'string',
      description: '数据集名字',
    },
    icon: {
      type: 'string',
      description: '图标',
    },
  },
} as const;

export const $AgentApiKey = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '',
    },
    agentId: {
      type: 'string',
      description: '',
    },
    apiUrl: {
      type: 'string',
      description: '',
    },
    apiKey: {
      type: 'string',
      description: '',
    },
  },
} as const;

export const $StackTraceElement__ = {
  type: 'object',
  properties: {
    classLoaderName: {
      type: 'string',
      description: 'The name of the class loader.',
    },
    moduleName: {
      type: 'string',
      description: 'The module name.',
    },
    moduleVersion: {
      type: 'string',
      description: 'The module version.',
    },
    declaringClass: {
      type: 'string',
      description: 'The declaring class.',
    },
    methodName: {
      type: 'string',
      description: 'The method name.',
    },
    fileName: {
      type: 'string',
      description: 'The source file name.',
    },
    lineNumber: {
      type: 'integer',
      description: 'The source line number.',
    },
    format: {
      type: 'number',
      description: 'Control to show full or partial module, package, and class names.',
      default: '0',
    },
  },
} as const;

export const $ResponseDataDatasetDocument = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/DatasetDocument',
      description: '响应数据对象',
    },
  },
} as const;

export const $SegmentVO = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '',
    },
    userId: {
      type: 'string',
      description: '',
    },
    workspaceId: {
      type: 'string',
      description: '工作空间id',
    },
    datasetId: {
      type: 'string',
      description: '知识库id',
    },
    documentId: {
      type: 'string',
      description: '文档id',
    },
    embeddingId: {
      type: 'string',
      description: '向量数据库里的对应segment id',
    },
    vectorCollectionName: {
      type: 'string',
      description: '向量库集合名称',
    },
    content: {
      type: 'string',
      description: '片段文本内容',
    },
    metadata: {
      type: 'string',
      description: '片段元数据',
    },
    wordCount: {
      type: 'integer',
      description: '字数',
      default: 0,
    },
    tokenCount: {
      type: 'integer',
      description: 'token数',
      default: 0,
    },
    hitCount: {
      type: 'integer',
      description: '检索命中次数',
      default: 0,
    },
    enableFlag: {
      type: 'boolean',
      description: '是否启用',
      default: false,
    },
    createTime: {
      type: 'string',
      description: '创建时间',
    },
    updateTime: {
      type: 'string',
      description: '更新时间',
    },
    documentName: {
      type: 'string',
      description: '文档名称',
    },
    score: {
      type: 'number',
      description: '相似度分数',
    },
  },
} as const;

export const $ResponseDataMapString = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/MapString',
      description: '响应数据对象',
    },
  },
} as const;

export const $Runnable = {
  type: 'object',
  properties: {},
} as const;

export const $ResponseDataListString = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: '响应数据对象',
    },
  },
} as const;

export const $ResponseDataListSegmentVO = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/SegmentVO',
        description: '',
      },
      description: '响应数据对象',
    },
  },
} as const;

export const $Agent = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '',
    },
    userId: {
      type: 'string',
      description: '创建者id',
    },
    workspaceId: {
      type: 'string',
      description: '工作空间id',
    },
    name: {
      type: 'string',
      description: 'agent名称',
    },
    icon: {
      type: 'string',
      description: '图标url',
    },
    description: {
      type: 'string',
      description: '描述,可空',
    },
    prompt: {
      type: 'string',
      description: '提示词',
    },
    llmModelId: {
      type: 'string',
      description: '关联的大模型id',
    },
    functionList: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/AgentFunction',
        description: 'com.litevar.agent.base.entity.Agent.AgentFunction',
      },
      description: '方法列表',
    },
    sequence: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: '方法执行顺序(functionId)',
    },
    status: {
      type: 'integer',
      description: 'agent状态: 0-初始待发布,1-已发布生效',
      default: 0,
    },
    temperature: {
      type: 'number',
      description: '温度值',
    },
    topP: {
      type: 'number',
      description: '概率抽样的 p 值',
    },
    maxTokens: {
      type: 'integer',
      description: '最大 token 数',
    },
    subAgentIds: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: '子agent(普通,分发,分思) id',
    },
    type: {
      type: 'integer',
      description: 'agent类型',
      enum: [0, 1, 2],
      default: 0,
    },
    mode: {
      type: 'integer',
      description: '执行模式',
      enum: [0, 1, 2],
      default: 0,
    },
    autoAgentFlag: {
      type: 'boolean',
      description: 'true-auto agent,false-非auto agent',
      default: false,
    },
    ttsModelId: {
      type: 'string',
      description: 'tts模型id',
    },
    asrModelId: {
      type: 'string',
      description: 'asr模型id',
    },
    createTime: {
      type: 'string',
      description: '',
    },
    updateTime: {
      type: 'string',
      description: '',
    },
    deleted: {
      type: 'string',
      description: '逻辑删除',
      default: '0',
    },
  },
} as const;

export const $DefaultCallback = {
  type: 'object',
  properties: {
    delegate: {
      description: '',
      anyOf: [
        {
          description: '',
          $ref: '#/components/schemas/Runnable',
        },
        {
          type: 'null',
        },
      ],
    },
  },
} as const;

export const $DocumentSplittingForm = {
  type: 'object',
  properties: {
    chunkSize: {
      type: 'integer',
      description: '',
      default: 500,
    },
    separator: {
      type: 'string',
      description: '',
    },
    metadata: {
      type: 'string',
      description: 'Metadata to be attached to the document, JSON string.',
    },
    previewFlag: {
      type: 'boolean',
      description: 'Flag to indicate it is preview or confirm splitting process.',
      default: false,
    },
  },
} as const;

export const $DatasetRetrieveHistory = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '',
    },
    datasetId: {
      type: 'string',
      description: '',
    },
    agentId: {
      type: 'string',
      description: '',
    },
    content: {
      type: 'string',
      description: '检索内容',
    },
    retrieveType: {
      type: 'string',
      description: '召回类型: TEST,AGENT',
    },
    retrieveSegmentList: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/RetrieveSegment',
        description: 'com.litevar.agent.base.entity.DatasetRetrieveHistory.RetrieveSegment',
      },
      description: '检索到的片段信息',
    },
    createTime: {
      type: 'string',
      description: '',
    },
  },
} as const;

export const $RetrieveSegment = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '片段id',
    },
    datasetId: {
      type: 'string',
      description: '知识库id',
    },
    documentId: {
      type: 'string',
      description: '文档id',
    },
    tokenCount: {
      type: 'integer',
      description: 'token数',
      default: 0,
    },
    score: {
      type: 'number',
      description: '相似度分数',
    },
  },
} as const;

export const $ResponseDataAgent = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/Agent',
      description: '响应数据对象',
    },
  },
} as const;

export const $ErrorCallback = {
  type: 'object',
  properties: {},
} as const;

export const $PageModelDatasetDocument = {
  type: 'object',
  properties: {
    pageNo: {
      type: 'integer',
      description: '当前第几页',
    },
    pageSize: {
      type: 'integer',
      description: '一页多少条记录',
    },
    total: {
      type: 'integer',
      description: '全部数据量',
      format: 'int64',
    },
    list: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/DatasetDocument',
        description: '',
      },
      description: '数据',
    },
  },
} as const;

export const $PageModelDatasetRetrieveHistory = {
  type: 'object',
  properties: {
    pageNo: {
      type: 'integer',
      description: '当前第几页',
    },
    pageSize: {
      type: 'integer',
      description: '一页多少条记录',
    },
    total: {
      type: 'integer',
      description: '全部数据量',
      format: 'int64',
    },
    list: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/DatasetRetrieveHistory',
        description: '',
      },
      description: '数据',
    },
  },
} as const;

export const $AgentCreateForm = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      description: 'agent名称',
    },
    icon: {
      type: 'string',
      description: '图标url',
    },
    description: {
      type: 'string',
      description: '描述,可空',
    },
    autoAgentFlag: {
      type: 'boolean',
      description: '',
      default: false,
    },
  },
  required: ['name'],
} as const;

export const $SseEmitter = {
  type: 'object',
  properties: {
    timeout: {
      type: ['integer', 'null'],
      description: '',
      format: 'int64',
    },
    handler: {
      description: '',
      anyOf: [
        {
          description: '',
          $ref: '#/components/schemas/Handler',
        },
        {
          type: 'null',
        },
      ],
    },
    earlySendAttempts: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/DataWithMediaType',
        description:
          'org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.DataWithMediaType',
      },
      description: 'Store send data before handler is initialized.',
    },
    complete: {
      type: 'boolean',
      description: 'Store successful completion before the handler is initialized.',
    },
    failure: {
      description: 'Store an error before the handler is initialized.',
      anyOf: [
        {
          description: '',
          $ref: '#/components/schemas/Throwable',
        },
        {
          type: 'null',
        },
      ],
    },
    timeoutCallback: {
      $ref: '#/components/schemas/DefaultCallback',
      description: '',
    },
    errorCallback: {
      $ref: '#/components/schemas/ErrorCallback',
      description: '',
    },
    completionCallback: {
      $ref: '#/components/schemas/DefaultCallback',
      description: '',
    },
  },
} as const;

export const $AgentDebugDTO = {
  type: 'object',
  properties: {
    agentId: {
      type: 'string',
      description: 'agent id',
    },
    modelId: {
      type: 'string',
      description: '模型id',
    },
    prompt: {
      type: 'string',
      description: '提示词',
    },
    temperature: {
      type: 'number',
      description: '温度值',
      minimum: 0,
      maximum: 1,
    },
    topP: {
      type: 'number',
      description: '概率抽样的 p 值',
      minimum: 0,
      maximum: 1,
    },
    maxTokens: {
      type: 'integer',
      description: '最大 token 数',
      minimum: 1,
    },
    subAgentIds: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: '子agent(普通,分发,分思) id',
    },
    mode: {
      type: 'integer',
      description: '执行模式',
      enum: [0, 1, 2],
      default: 0,
    },
    auto: {
      type: 'integer',
      description: 'auto-agent:0-关闭,1-开启',
      default: 0,
    },
    type: {
      type: 'integer',
      description: 'agent类型',
      enum: [0, 1, 2],
    },
    functionList: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/AgentFunction',
        description: 'com.litevar.agent.base.entity.Agent.AgentFunction',
      },
      description: '方法列表',
    },
    datasetIds: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: '数据集id',
    },
    sequence: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: '方法执行顺序(functionId)',
    },
  },
  required: ['agentId', 'modelId'],
} as const;

export const $ResponseDataPageModelDatasetDocument = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/PageModelDatasetDocument',
      description: '响应数据对象',
    },
  },
} as const;

export const $ResponseDataPageModelDatasetRetrieveHistory = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/PageModelDatasetRetrieveHistory',
      description: '响应数据对象',
    },
  },
} as const;

export const $AgentUpdateForm = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      description: 'agent名称',
    },
    icon: {
      type: 'string',
      description: '图标url',
    },
    description: {
      type: 'string',
      description: '描述,可空',
    },
    prompt: {
      type: 'string',
      description: '提示词',
    },
    llmModelId: {
      type: 'string',
      description: '关联的大模型id',
    },
    temperature: {
      type: 'number',
      description: '温度值',
      minimum: 0,
      maximum: 1,
    },
    topP: {
      type: 'number',
      description: '概率抽样的 p 值',
      minimum: 0,
      maximum: 1,
    },
    maxTokens: {
      type: 'integer',
      description: '最大 token 数',
      minimum: 1,
    },
    type: {
      type: 'integer',
      description: 'agent类型',
      enum: [0, 1, 2],
      default: 0,
    },
    mode: {
      type: 'integer',
      description: '执行模式',
      enum: [0, 1, 2],
      default: 0,
    },
    subAgentIds: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: '子agent(普通,分发,分思) id',
    },
    functionList: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/AgentFunction',
        description: 'com.litevar.agent.base.entity.Agent.AgentFunction',
      },
      description: '方法列表',
    },
    sequence: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: '方法执行顺序(functionId)',
    },
    datasetIds: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: '数据集id',
    },
    ttsModelId: {
      type: 'string',
      description: 'tts模型id',
    },
    asrModelId: {
      type: 'string',
      description: 'asr模型id',
    },
  },
  required: ['name'],
} as const;

export const $AgentSendMsgDTO = {
  type: 'object',
  properties: {
    type: {
      type: 'string',
      description: 'text,imageUrl,execute',
    },
    message: {
      type: 'string',
      description:
        'type=imageUrl时,格式为: data:image/jpeg;base64,{图片的base64编码};type=execute时,内容为planId',
    },
  },
  required: ['type', 'message'],
} as const;

export const $DocumentSegment = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '',
    },
    userId: {
      type: 'string',
      description: '',
    },
    workspaceId: {
      type: 'string',
      description: '工作空间id',
    },
    datasetId: {
      type: 'string',
      description: '知识库id',
    },
    documentId: {
      type: 'string',
      description: '文档id',
    },
    embeddingId: {
      type: 'string',
      description: '向量数据库里的对应segment id',
    },
    vectorCollectionName: {
      type: 'string',
      description: '向量库集合名称',
    },
    content: {
      type: 'string',
      description: '',
    },
    metadata: {
      type: 'string',
      description: '',
    },
    wordCount: {
      type: 'integer',
      description: '',
      default: 0,
    },
    tokenCount: {
      type: 'integer',
      description: '',
      default: 0,
    },
    hitCount: {
      type: 'integer',
      description: '',
      default: 0,
    },
    enableFlag: {
      type: 'boolean',
      description: '',
      default: false,
    },
    createTime: {
      type: 'string',
      description: '创建时间',
    },
    updateTime: {
      type: 'string',
      description: '更新时间',
    },
  },
} as const;

export const $PageModelDocumentSegment = {
  type: 'object',
  properties: {
    pageNo: {
      type: 'integer',
      description: '当前第几页',
    },
    pageSize: {
      type: 'integer',
      description: '一页多少条记录',
    },
    total: {
      type: 'integer',
      description: '全部数据量',
      format: 'int64',
    },
    list: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/DocumentSegment',
        description: '',
      },
      description: '数据',
    },
  },
} as const;

export const $FunctionCall = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '',
    },
    name: {
      type: 'string',
      description: '',
    },
    arguments: {
      type: 'object',
      properties: {},
      description: '',
    },
  },
} as const;

export const $ResponseDataPageModelDocumentSegment = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/PageModelDocumentSegment',
      description: '响应数据对象',
    },
  },
} as const;

export const $ResponseDataApiInfo = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/ApiInfo',
      description: '响应数据对象',
    },
  },
} as const;

export const $MapObject = {
  type: 'object',
  properties: {
    key: {
      $ref: '#/components/schemas/key',
    },
  },
} as const;

export const $ResponseDataAgentApiKey = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/AgentApiKey',
      description: '响应数据对象',
    },
  },
} as const;

export const $OutMessage = {
  type: 'object',
  properties: {
    agentId: {
      type: 'string',
      description: '消息属于哪个agent的',
    },
    taskId: {
      type: 'string',
      description: '',
    },
    role: {
      type: 'string',
      description: '',
    },
    type: {
      type: 'string',
      description: '消息类型:text,imageUrl,functionCallList,toolReturn,flag',
    },
    content: {
      type: 'object',
      properties: {},
      description: '',
    },
    createTime: {
      type: 'string',
      description: '',
    },
    toolCalls: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/FunctionCall',
        description: 'com.litevar.agent.base.vo.OutMessage.FunctionCall',
      },
      description: '',
    },
    toolCallId: {
      type: 'string',
      description: '',
    },
    id: {
      type: 'string',
      description: '大模型响应的消息id',
    },
    tokenUsage: {
      $ref: '#/components/schemas/TokenUsage',
      description: '',
    },
  },
} as const;

export const $ResponseDataDocumentSegment = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/DocumentSegment',
      description: '响应数据对象',
    },
  },
} as const;

export const $Metadata = {
  type: 'object',
  properties: {
    metadata: {
      $ref: '#/components/schemas/MapObject',
      description: '',
    },
  },
} as const;

export const $ResponseData = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'id',
          },
          name: {
            type: 'string',
            description: '名称',
          },
          userId: {
            type: 'string',
            description: '创建者id',
          },
          workspaceId: {
            type: 'string',
            description: '工作空间id',
          },
          icon: {
            type: 'string',
            description: '图标',
          },
          description: {
            type: 'string',
            description: '描述',
          },
          shareFlag: {
            type: 'boolean',
            description: '分享标识',
            default: false,
          },
          dataSourceType: {
            type: 'string',
            description: '数据源类型: INPUT, FILE, HTML',
          },
          vectorCollectionName: {
            type: 'string',
            description: '向量库集合名称',
          },
          llmModelId: {
            type: 'string',
            description: '关联的大模型id',
          },
          embeddingModel: {
            type: 'string',
            description: 'embedding 模型',
          },
          embeddingModelProvider: {
            type: 'string',
            description: 'embedding 模型提供商',
          },
          retrievalTopK: {
            type: 'integer',
            description: '检索 TopK',
          },
          retrievalScoreThreshold: {
            type: 'number',
            description: '检索分数阈值',
          },
          apiUrl: {
            type: 'string',
            description: '分享给外部的apiUrl',
          },
          apiKey: {
            type: 'string',
            description: '分享给外部的apikey',
          },
          createTime: {
            type: 'string',
            description: '创建时间',
          },
          updateTime: {
            type: 'string',
            description: '更新时间',
          },
        },
      },
      description: '响应数据对象',
    },
  },
} as const;

export const $TokenUsage = {
  type: 'object',
  properties: {
    promptTokens: {
      type: 'integer',
      description: '',
    },
    completionTokens: {
      type: 'integer',
      description: '',
    },
    totalTokens: {
      type: 'integer',
      description: '',
    },
  },
} as const;

export const $SegmentUpdateForm = {
  type: 'object',
  properties: {
    content: {
      type: 'string',
      description: '',
    },
    metadata: {
      type: 'string',
      description: '',
    },
  },
  required: ['content'],
} as const;

export const $TextSegment = {
  type: 'object',
  properties: {
    text: {
      type: 'string',
      description: '',
    },
    metadata: {
      $ref: '#/components/schemas/Metadata',
      description: '',
    },
  },
} as const;

export const $TaskMessage = {
  type: 'object',
  properties: {
    taskId: {
      type: 'string',
      description: '',
    },
    message: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/OutMessage',
        description: '输出前端的message',
      },
      description: '',
    },
  },
} as const;

export const $ResponseDataListTextSegment = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/TextSegment',
        description: 'dev.langchain4j.data.segment.TextSegment',
      },
      description: '响应数据对象',
    },
  },
} as const;

export const $ResponseDataListTaskMessage = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/TaskMessage',
        description: 'com.litevar.agent.base.entity.AgentChatMessage.TaskMessage',
      },
      description: '响应数据对象',
    },
  },
} as const;

export const $ResponseDataListDocumentSegment = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/DocumentSegment',
        description: '',
      },
      description: '响应数据对象',
    },
  },
} as const;

export const $MessageDTO = {
  type: 'object',
  properties: {
    sessionId: {
      type: 'string',
      description: '',
    },
    taskMessage: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/TaskMessage',
        description: 'com.litevar.agent.base.entity.AgentChatMessage.TaskMessage',
      },
      description: '',
    },
    origin: {
      type: 'string',
      description: '来源: api,user,debug',
    },
    createTime: {
      type: 'string',
      description: '',
    },
    user: {
      type: 'string',
      description: '',
    },
  },
} as const;

export const $DocumentCreateForm = {
  type: 'object',
  properties: {
    workspaceId: {
      type: 'string',
      description: '',
    },
    name: {
      type: 'string',
      description: 'Document name',
    },
    dataSourceType: {
      type: 'string',
      description: 'Document source type: INPUT, FILE, HTML',
    },
    content: {
      type: 'string',
      description: 'input content',
    },
    htmlUrl: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: 'html url',
      default: 'Collections.emptyList()',
    },
    fileId: {
      type: 'string',
      description: 'upload file id',
    },
    chunkSize: {
      type: 'integer',
      description: 'default chunk size',
      default: 500,
    },
    separator: {
      type: 'string',
      description: 'default Separator to split the document.',
    },
    metadata: {
      type: 'string',
      description: 'Metadata to be attached to the document, JSON string.',
    },
  },
  required: ['workspaceId', 'dataSourceType'],
} as const;

export const $ResponseDataListMessageDTO = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/MessageDTO',
        description: '',
      },
      description: '响应数据对象',
    },
  },
} as const;

export const $PageModelMessageDTO = {
  type: 'object',
  properties: {
    pageNo: {
      type: 'integer',
      description: '当前第几页',
    },
    pageSize: {
      type: 'integer',
      description: '一页多少条记录',
    },
    total: {
      type: 'integer',
      description: '全部数据量',
      format: 'int64',
    },
    list: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/MessageDTO',
        description: '',
      },
      description: '数据',
    },
  },
} as const;

export const $AgentChatMessageClear = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '',
    },
    userId: {
      type: 'string',
      description: '',
    },
    agentId: {
      type: 'string',
      description: '',
    },
    debugFlag: {
      type: 'integer',
      description: '',
    },
    createTime: {
      type: 'string',
      description: '',
    },
  },
} as const;

export const $ResponseDataListDict = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Dict',
        description: 'cn.hutool.core.lang.Dict',
      },
      description: '响应数据对象',
    },
  },
} as const;

export const $MessageAndClearDTO = {
  type: 'object',
  properties: {
    messageList: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/MessageDTO',
        description: '',
      },
      description: '',
    },
    clearList: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/AgentChatMessageClear',
        description: '聊天消息清除流水',
      },
      description: '',
      default: 'Collections.emptyList()',
    },
  },
} as const;

export const $Worker = {
  type: 'object',
  properties: {
    workNo: {
      type: 'string',
      description: '工号',
    },
    username: {
      type: 'string',
      description: '名字',
    },
    job: {
      type: 'string',
      description: '职位',
    },
  },
  required: ['workNo', 'job'],
} as const;

export const $ResponseDataMessageAndClearDTO = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/MessageAndClearDTO',
      description: '响应数据对象',
    },
  },
} as const;

export const $ResponseDataPageModelMessageDTO = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/PageModelMessageDTO',
      description: '响应数据对象',
    },
  },
} as const;

export const $ModelDTO = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: '',
    },
    name: {
      type: 'string',
      description: '模型名称',
    },
    alias: {
      type: 'string',
      description: '别名',
    },
    baseUrl: {
      type: 'string',
      description: '模型访问url',
    },
    apiKey: {
      type: 'string',
      description: '模型访问key',
    },
    userId: {
      type: 'string',
      description: '创建者id',
    },
    createUser: {
      type: 'string',
      description: '创建人名称',
    },
    maxTokens: {
      type: 'integer',
      description: '限制最大token',
    },
    type: {
      type: 'string',
      description: '模型类型: text, embedding, image, video...',
      default: 'llm',
    },
    provider: {
      type: 'string',
      description: '模型供应商: openai, dashscope, deepseek, prm, others ...',
      default: 'openai',
    },
    fieldMapping: {
      type: 'string',
      description: '字段映射,JSON字符串格式(不兼容OpenAI的模型可以设置字段映射,后端请求时动态修改请求体)',
    },
    responseFormat: {
      type: 'string',
      description: `响应格式: wav, mp3, pcm...
默认wav`,
      default: 'wav',
    },
    autoAgent: {
      type: 'boolean',
      description: '是否支持auto agent使用',
      default: false,
    },
    toolInvoke: {
      type: 'boolean',
      description: '是否支持工具调用',
      default: false,
    },
    deepThink: {
      type: 'boolean',
      description: '是否支持深度思考',
      default: false,
    },
    canEdit: {
      type: 'boolean',
      description: '是否能编辑',
      default: false,
    },
    canDelete: {
      type: 'boolean',
      description: '是否能删除',
      default: false,
    },
    canRead: {
      type: 'boolean',
      description: '是否能读',
      default: false,
    },
  },
} as const;

export const $PageModelModelDTO = {
  type: 'object',
  properties: {
    pageNo: {
      type: 'integer',
      description: '当前第几页',
    },
    pageSize: {
      type: 'integer',
      description: '一页多少条记录',
    },
    total: {
      type: 'integer',
      description: '全部数据量',
      format: 'int64',
    },
    list: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ModelDTO',
        description: '',
      },
      description: '数据',
    },
  },
} as const;

export const $ResponseDataPageModelModelDTO = {
  type: 'object',
  properties: {
    code: {
      type: 'integer',
      description: '状态码',
    },
    message: {
      type: 'string',
      description: '响应信息',
    },
    data: {
      $ref: '#/components/schemas/PageModelModelDTO',
      description: '响应数据对象',
    },
  },
} as const;
