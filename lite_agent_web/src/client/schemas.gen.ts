// This file is auto-generated by @hey-api/openapi-ts

export const $ResponseDataString = {
    type: 'object',
    properties: {
        code: {
            type: 'integer',
            description: '状态码',
        },
        message: {
            type: 'string',
            description: '响应信息',
        },
        data: {
            type: 'string',
            description: '响应数据对象',
        },
    },
} as const;

export const $ResponseData_String_AddAction = {
    type: 'object',
    properties: {
        code: {
            type: ['integer', 'null'],
            description: '状态码',
        },
        message: {
            type: ['string', 'null'],
            description: '响应信息',
        },
        data: {
            type: ['string', 'null'],
            description: '响应数据对象',
        },
    },
} as const;

export const $ToolDTO = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '工具id',
        },
        name: {
            type: 'string',
            description: '工具名称',
        },
        icon: {
            type: 'string',
            description: '',
        },
        description: {
            type: 'string',
            description: '描述',
        },
        shareTip: {
            type: 'boolean',
            description: '是否已分享',
        },
        canEdit: {
            type: 'boolean',
            description: '是否能编辑',
            default: 'public static final Boolean FALSE = new Boolean(false);',
        },
        canDelete: {
            type: 'boolean',
            description: '是否能删除',
            default: 'public static final Boolean FALSE = new Boolean(false);',
        },
        canRead: {
            type: 'boolean',
            description: '是否能读',
            default: 'public static final Boolean TRUE = new Boolean(true);',
        },
    },
} as const;

export const $Account = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '',
        },
        name: {
            type: 'string',
            description: '昵称',
        },
        email: {
            type: 'string',
            description: '邮箱',
        },
        avatar: {
            type: 'string',
            description: '头像',
        },
        status: {
            type: 'integer',
            description: '账号状态',
        },
        createTime: {
            type: 'string',
            description: '',
        },
        updateTime: {
            type: 'string',
            description: '',
        },
    },
} as const;

export const $AgentDTO = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '',
        },
        userId: {
            type: 'string',
            description: '创建者id',
        },
        name: {
            type: 'string',
            description: 'agent名称',
        },
        icon: {
            type: 'string',
            description: '图标url',
        },
        description: {
            type: 'string',
            description: '描述,可空',
        },
        shareTip: {
            type: 'boolean',
            description: '是否已分享',
        },
        status: {
            type: 'integer',
            description: '是否已发布',
        },
    },
} as const;

export const $WorkSpaceVO = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '工作空间id',
        },
        name: {
            type: 'string',
            description: '工作空间名字',
        },
        role: {
            type: 'string',
            description: '当前账号在里面的角色',
            enum: ['0', '1', '2', '3', 'ROLE_USER', 'ROLE_ADMIN_DEL', 'ROLE_DEVELOPER', 'ROLE_ADMIN'],
        },
    },
} as const;

export const $ResponseDataInteger = {
    type: 'object',
    properties: {
        code: {
            type: 'integer',
            description: '状态码',
        },
        message: {
            type: 'string',
            description: '响应信息',
        },
        data: {
            type: 'integer',
            description: '响应数据对象',
        },
    },
} as const;

export const $LlmModel = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '',
        },
        name: {
            type: 'string',
            description: '模型名称',
        },
        baseUrl: {
            type: 'string',
            description: '模型访问url',
        },
        apiKey: {
            type: 'string',
            description: '模型访问key',
        },
        userId: {
            type: 'string',
            description: '创建者id',
        },
        workspaceId: {
            type: 'string',
            description: '工作空间id',
        },
        shareFlag: {
            type: 'boolean',
            description: '是否共享',
        },
        createTime: {
            type: 'string',
            description: '',
        },
        updateTime: {
            type: 'string',
            description: '',
        },
    },
} as const;

export const $ModelVOAddAction = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '',
        },
        name: {
            type: 'string',
            description: '模型名字',
        },
        baseUrl: {
            type: 'string',
            description: '请求url',
        },
        apiKey: {
            type: 'string',
            description: '接口key',
        },
        shareFlag: {
            type: 'boolean',
            description: '分享-true,不分享-false',
        },
        maxTokens: {
            type: 'integer',
            description: '限制最大token',
            minimum: 1,
        },
    },
    required: ['name', 'baseUrl', 'apiKey', 'shareFlag'],
} as const;

export const $ResponseDataListToolDTO = {
    type: 'object',
    properties: {
        code: {
            type: 'integer',
            description: '状态码',
        },
        message: {
            type: 'string',
            description: '响应信息',
        },
        data: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/ToolDTO',
                description: '工具管理列表返回数据',
            },
            description: '响应数据对象',
        },
    },
} as const;

export const $ResponseDataAccount = {
    type: 'object',
    properties: {
        code: {
            type: 'integer',
            description: '状态码',
        },
        message: {
            type: 'string',
            description: '响应信息',
        },
        data: {
            $ref: '#/components/schemas/Account',
            description: '响应数据对象',
        },
    },
} as const;

export const $ResponseDataIterableAgent = {
    type: 'object',
    properties: {
        code: {
            type: 'integer',
            description: '状态码',
        },
        message: {
            type: 'string',
            description: '响应信息',
        },
        data: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/Agent',
                description: 'agents 数据表',
            },
            description: '响应数据对象',
        },
    },
} as const;

export const $ResponseDataListAgentDTO = {
    type: 'object',
    properties: {
        code: {
            type: 'integer',
            description: '状态码',
        },
        message: {
            type: 'string',
            description: '响应信息',
        },
        data: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/AgentDTO',
                description: '列表返回',
            },
            description: '响应数据对象',
        },
    },
} as const;

export const $ResponseDataListWorkSpaceVO = {
    type: 'object',
    properties: {
        code: {
            type: 'integer',
            description: '状态码',
        },
        message: {
            type: 'string',
            description: '响应信息',
        },
        data: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/WorkSpaceVO',
                description: '',
            },
            description: '响应数据对象',
        },
    },
} as const;

export const $ResponseData_LlmModel_ = {
    type: 'object',
    properties: {
        code: {
            type: ['integer', 'null'],
            description: '状态码',
        },
        message: {
            type: ['string', 'null'],
            description: '响应信息',
        },
        data: {
            $ref: '#/components/schemas/LlmModel',
            description: '响应数据对象',
        },
    },
} as const;

export const $ToolProvider = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '',
        },
        userId: {
            type: 'string',
            description: '创建人',
        },
        workspaceId: {
            type: 'string',
            description: '工作空间id',
        },
        name: {
            type: 'string',
            description: '工具名称',
        },
        icon: {
            type: 'string',
            description: '',
        },
        description: {
            type: 'string',
            description: '描述',
        },
        schemaType: {
            type: 'integer',
            description: `schema类型:
1-openapi
2-jsonrpc
3-open_modbus`,
        },
        schemaStr: {
            type: 'string',
            description: '原始schema描述字符串, yml、json',
        },
        apiKey: {
            type: 'string',
            description: '调用工具的apiKey',
        },
        apiKeyType: {
            type: 'string',
            description: 'apiKey类型: Bearer、Basic',
        },
        shareFlag: {
            type: 'boolean',
            description: '分享标记',
        },
        createTime: {
            type: 'string',
            description: '',
        },
        updateTime: {
            type: 'string',
            description: '',
        },
    },
} as const;

export const $Handler = {
    type: 'object',
    properties: {},
} as const;

export const $AgentSessionVO = {
    type: 'object',
    properties: {
        agentId: {
            type: 'string',
            description: '',
        },
        name: {
            type: 'string',
            description: 'agent名字',
        },
        createTime: {
            type: 'string',
            description: '',
        },
    },
} as const;

export const $key = {
    type: 'object',
    properties: {},
} as const;

export const $WorkspaceMember = {
    type: 'object',
    properties: {
        id: {
            type: ['string', 'null'],
            description: '',
        },
        workspaceId: {
            type: ['string', 'null'],
            description: '空间id',
        },
        userId: {
            type: ['string', 'null'],
            description: '成员用户id',
        },
        email: {
            type: ['string', 'null'],
            description: '成员账号',
        },
        role: {
            type: ['integer', 'null'],
            description: '空间成员角色',
        },
        createTime: {
            type: ['string', 'null'],
            description: '加入时间',
        },
    },
} as const;

export const $WorkspaceMemberVO = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '成员id',
        },
        workspaceId: {
            type: 'string',
            description: '空间id',
        },
        userId: {
            type: 'string',
            description: '成员用户id',
        },
        name: {
            type: 'string',
            description: '昵称',
        },
        email: {
            type: 'string',
            description: '成员账号',
        },
        role: {
            type: 'integer',
            description: '空间成员角色',
        },
        createTime: {
            type: 'string',
            description: '加入时间',
        },
    },
} as const;

export const $ResponseData_String_UpdateAction = {
    type: 'object',
    properties: {
        code: {
            type: ['integer', 'null'],
            description: '状态码',
        },
        message: {
            type: ['string', 'null'],
            description: '响应信息',
        },
        data: {
            type: ['string', 'null'],
            description: '响应数据对象',
        },
    },
} as const;

export const $ResponseDataToolProvider = {
    type: 'object',
    properties: {
        code: {
            type: 'integer',
            description: '状态码',
        },
        message: {
            type: 'string',
            description: '响应信息',
        },
        data: {
            $ref: '#/components/schemas/ToolProvider',
            description: '响应数据对象',
        },
    },
} as const;

export const $Object = {
    type: 'object',
    properties: {},
} as const;

export const $ResponseDataListAgentSessionVO = {
    type: 'object',
    properties: {
        code: {
            type: 'integer',
            description: '状态码',
        },
        message: {
            type: 'string',
            description: '响应信息',
        },
        data: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/AgentSessionVO',
                description: '',
            },
            description: '响应数据对象',
        },
    },
} as const;

export const $Dict = {
    type: 'object',
    properties: {
        key: {
            $ref: '#/components/schemas/key',
        },
    },
} as const;

export const $Sort = {
    type: 'object',
    properties: {
        direction: {
            type: ['string', 'null'],
            description: '',
            enum: ['ASC', 'DESC'],
        },
        property: {
            type: ['string', 'null'],
            description: '',
        },
        ignoreCase: {
            type: ['boolean', 'null'],
            description: '',
        },
        nullHandling: {
            type: ['string', 'null'],
            description: '',
            enum: ['NATIVE', 'NULLS_FIRST', 'NULLS_LAST'],
        },
        ascending: {
            type: ['boolean', 'null'],
            description: 'Returns whether sorting for this property shall be ascending.',
        },
        descending: {
            type: ['boolean', 'null'],
            description: 'Returns whether sorting for this property shall be descending.',
        },
    },
} as const;

export const $PageModelWorkspaceMemberVO = {
    type: 'object',
    properties: {
        pageNo: {
            type: 'integer',
            description: '当前第几页',
        },
        pageSize: {
            type: 'integer',
            description: '一页多少条记录',
        },
        total: {
            type: 'integer',
            description: '全部数据量',
        },
        list: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/WorkspaceMemberVO',
                description: '工作空间成员列表信息',
            },
            description: '数据',
        },
    },
} as const;

export const $ModelVOUpdateAction = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '',
        },
        name: {
            type: 'string',
            description: '模型名字',
        },
        baseUrl: {
            type: 'string',
            description: '请求url',
        },
        apiKey: {
            type: 'string',
            description: '接口key',
        },
        shareFlag: {
            type: 'boolean',
            description: '分享-true,不分享-false',
        },
        maxTokens: {
            type: 'integer',
            description: '限制最大token',
            minimum: 1,
        },
    },
    required: ['id', 'name', 'baseUrl', 'apiKey', 'shareFlag'],
} as const;

export const $MapString = {
    type: 'object',
    properties: {
        key: {
            type: 'string',
        },
    },
} as const;

export const $AgentVO = {
    type: 'object',
    properties: {
        agent: {
            $ref: '#/components/schemas/Agent',
            description: 'agents 数据表',
        },
        model: {
            $ref: '#/components/schemas/LlmModel',
            description: '响应数据对象',
        },
        toolList: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/ToolProvider',
                description: '响应数据对象',
            },
            description: '',
        },
    },
} as const;

export const $ResponseDataDict = {
    type: 'object',
    properties: {
        code: {
            type: 'integer',
            description: '状态码',
        },
        message: {
            type: 'string',
            description: '响应信息',
        },
        data: {
            $ref: '#/components/schemas/Dict',
            description: '响应数据对象',
        },
    },
} as const;

export const $Pageable = {
    type: 'object',
    properties: {
        paged: {
            type: ['boolean', 'null'],
            description: 'Returns whether the current{@link Pageable} contains pagination information.',
        },
        unpaged: {
            type: ['boolean', 'null'],
            description:
                'Returns whether the current{@link Pageable} does not contain pagination information.',
        },
        pageNumber: {
            type: ['integer', 'null'],
            description: 'Returns the page to be returned.',
        },
        pageSize: {
            type: ['integer', 'null'],
            description: 'Returns the number of items to be returned.',
        },
        offset: {
            type: ['integer', 'null'],
            description: 'Returns the offset to be taken according to the underlying page and page size.',
        },
        sort: {
            type: ['array', 'null'],
            items: {
                $ref: '#/components/schemas/Sort',
                description: 'org.springframework.data.domain.Sort',
            },
            description: 'Returns the sorting parameters.',
        },
    },
} as const;

export const $ResponseDataPageModelWorkspaceMemberVO = {
    type: 'object',
    properties: {
        code: {
            type: 'integer',
            description: '状态码',
        },
        message: {
            type: 'string',
            description: '响应信息',
        },
        data: {
            $ref: '#/components/schemas/PageModelWorkspaceMemberVO',
            description: '响应数据对象',
        },
    },
} as const;

export const $ToolVO = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '工具id',
        },
        name: {
            type: 'string',
            description: '工具名称',
        },
        description: {
            type: 'string',
            description: '描述',
        },
        schemaType: {
            type: 'integer',
            description: 'schema类型',
            enum: [1, 2, 3],
        },
        schemaStr: {
            type: 'string',
            description: 'schema文稿',
        },
        apiKeyType: {
            type: 'string',
            description: 'api key类型:Bearer、Basic',
        },
        apiKey: {
            type: 'string',
            description: 'api key 值',
        },
        shareFlag: {
            type: 'boolean',
            description: '是否分享',
            default: 'public static final Boolean FALSE = new Boolean(false);',
        },
    },
    required: ['name', 'schemaType', 'schemaStr'],
} as const;

export const $ToolVOAddAction = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '工具id',
        },
        name: {
            type: 'string',
            description: '工具名称',
        },
        description: {
            type: 'string',
            description: '描述',
        },
        schemaType: {
            type: 'integer',
            description: 'schema类型',
            enum: [1, 2, 3],
        },
        schemaStr: {
            type: 'string',
            description: 'schema文稿',
        },
        apiKeyType: {
            type: 'string',
            description: 'api key类型:Bearer、Basic',
        },
        apiKey: {
            type: 'string',
            description: 'api key 值',
        },
        shareFlag: {
            type: 'boolean',
            description: '是否分享',
            default: 'public static final Boolean FALSE = new Boolean(false);',
        },
    },
    required: ['name', 'schemaType', 'schemaStr'],
} as const;

export const $MediaType = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            description: '',
        },
        subtype: {
            type: 'string',
            description: '',
        },
        parameters: {
            $ref: '#/components/schemas/MapString',
            description: '',
        },
        toStringValue: {
            type: 'string',
            description: '',
        },
    },
} as const;

export const $ResponseDataAgentVO = {
    type: 'object',
    properties: {
        code: {
            type: 'integer',
            description: '状态码',
        },
        message: {
            type: 'string',
            description: '响应信息',
        },
        data: {
            $ref: '#/components/schemas/AgentVO',
            description: '响应数据对象',
        },
    },
} as const;

export const $AgentDetailVO = {
    type: 'object',
    properties: {
        agent: {
            $ref: '#/components/schemas/Agent',
            description: 'agents 数据表',
        },
        model: {
            $ref: '#/components/schemas/LlmModel',
            description: '响应数据对象',
        },
        toolList: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/ToolDTO',
                description: '工具管理列表返回数据',
            },
            description: '',
        },
        canEdit: {
            type: 'boolean',
            description: '是否能编辑',
            default: 'public static final Boolean FALSE = new Boolean(false);',
        },
        canDelete: {
            type: 'boolean',
            description: '是否能删除',
            default: 'public static final Boolean FALSE = new Boolean(false);',
        },
        canRelease: {
            type: 'boolean',
            description: '是否能发布',
            default: 'public static final Boolean FALSE = new Boolean(false);',
        },
    },
} as const;

export const $Page_WorkspaceMember_ = {
    type: 'object',
    properties: {
        content: {
            type: ['array', 'null'],
            items: {
                $ref: '#/components/schemas/WorkspaceMember',
                description: '工作空间成员',
            },
            description: '',
            default: 'new ArrayList<>()',
        },
        pageable: {
            $ref: '#/components/schemas/Pageable',
            description: '',
        },
        total: {
            type: ['integer', 'null'],
            description: '',
        },
        empty: {
            type: ['boolean', 'null'],
            description: 'Returns whether the current{@link Streamable} is empty.',
        },
        number: {
            type: ['integer', 'null'],
        },
        size: {
            type: ['integer', 'null'],
        },
        numberOfElements: {
            type: ['integer', 'null'],
        },
        sort: {
            type: ['array', 'null'],
            items: {
                $ref: '#/components/schemas/Sort',
                description: 'org.springframework.data.domain.Sort',
            },
        },
        first: {
            type: ['boolean', 'null'],
        },
        last: {
            type: ['boolean', 'null'],
        },
        totalPages: {
            type: ['integer', 'null'],
        },
        totalElements: {
            type: ['integer', 'null'],
        },
    },
} as const;

export const $PageModel_LlmModel_ = {
    type: 'object',
    properties: {
        pageNo: {
            type: ['integer', 'null'],
            description: '当前第几页',
        },
        pageSize: {
            type: ['integer', 'null'],
            description: '一页多少条记录',
        },
        total: {
            type: ['integer', 'null'],
            description: '全部数据量',
        },
        list: {
            type: ['array', 'null'],
            items: {
                $ref: '#/components/schemas/LlmModel',
                description: '响应数据对象',
            },
            description: '数据',
        },
    },
} as const;

export const $DataWithMediaType = {
    type: 'object',
    properties: {
        data: {
            $ref: '#/components/schemas/Object',
            description: '',
        },
        mediaType: {
            $ref: '#/components/schemas/MediaType',
            description: '',
        },
    },
} as const;

export const $ResponseDataAgentDetailVO = {
    type: 'object',
    properties: {
        code: {
            type: 'integer',
            description: '状态码',
        },
        message: {
            type: 'string',
            description: '响应信息',
        },
        data: {
            $ref: '#/components/schemas/AgentDetailVO',
            description: '响应数据对象',
        },
    },
} as const;

export const $ResponseData_Page_WorkspaceMember__ = {
    type: 'object',
    properties: {
        code: {
            type: ['integer', 'null'],
            description: '状态码',
        },
        message: {
            type: ['string', 'null'],
            description: '响应信息',
        },
        data: {
            $ref: '#/components/schemas/Page«WorkspaceMember»',
            description: '响应数据对象',
        },
    },
} as const;

export const $ResponseData_PageModel_LlmModel__ = {
    type: 'object',
    properties: {
        code: {
            type: ['integer', 'null'],
            description: '状态码',
        },
        message: {
            type: ['string', 'null'],
            description: '响应信息',
        },
        data: {
            $ref: '#/components/schemas/PageModel«LlmModel»',
            description: '响应数据对象',
        },
    },
} as const;

export const $ToolVOUpdateAction = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '工具id',
        },
        name: {
            type: 'string',
            description: '工具名称',
        },
        description: {
            type: 'string',
            description: '描述',
        },
        schemaType: {
            type: 'integer',
            description: 'schema类型',
            enum: [1, 2, 3],
        },
        schemaStr: {
            type: 'string',
            description: 'schema文稿',
        },
        apiKeyType: {
            type: 'string',
            description: 'api key类型:Bearer、Basic',
        },
        apiKey: {
            type: 'string',
            description: 'api key 值',
        },
        shareFlag: {
            type: 'boolean',
            description: '是否分享',
            default: 'public static final Boolean FALSE = new Boolean(false);',
        },
    },
    required: ['id', 'name', 'schemaType', 'schemaStr'],
} as const;

export const $Throwable = {
    type: 'object',
    properties: {
        detailMessage: {
            type: 'string',
            description: `Specific details about the Throwable.  For example, for
{@code FileNotFoundException}, this contains the name of
the file that could not be found.`,
        },
        cause: {
            $ref: '#/components/schemas/Throwable',
            description: `The throwable that caused this throwable to get thrown, or null if this
throwable was not caused by another throwable, or if the causative
throwable is unknown.  If this field is equal to this throwable itself,
it indicates that the cause of this throwable has not yet been
initialized.`,
            default: 'this',
        },
        stackTrace: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/StackTraceElement[]',
            },
            description: `The stack trace, as returned by{@link #getStackTrace()}.

The field is initialized to a zero-length array.  A{@code
    * null} value of this field indicates subsequent calls to{@link
    * #setStackTrace(StackTraceElement[])} and{@link
    * #fillInStackTrace()} will be no-ops.`,
            default: 'new StackTraceElement[0]',
        },
        suppressedExceptions: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/Throwable',
                description: `The throwable that caused this throwable to get thrown, or null if this
throwable was not caused by another throwable, or if the causative
throwable is unknown.  If this field is equal to this throwable itself,
it indicates that the cause of this throwable has not yet been
initialized.`,
                default: 'this',
            },
            description: `The list of suppressed exceptions, as returned by{@link
    * #getSuppressed()}.  The list is initialized to a zero-element
unmodifiable sentinel list.  When a serialized Throwable is
read in, if the{@code suppressedExceptions} field points to a
zero-element list, the field is reset to the sentinel value.`,
            default: 'Collections.emptyList()',
        },
    },
} as const;

export const $StackTraceElement__ = {
    type: 'object',
    properties: {
        classLoaderName: {
            type: 'string',
            description: 'The name of the class loader.',
        },
        moduleName: {
            type: 'string',
            description: 'The module name.',
        },
        moduleVersion: {
            type: 'string',
            description: 'The module version.',
        },
        declaringClass: {
            type: 'string',
            description: 'The declaring class.',
        },
        methodName: {
            type: 'string',
            description: 'The method name.',
        },
        fileName: {
            type: 'string',
            description: 'The source file name.',
        },
        lineNumber: {
            type: 'integer',
            description: 'The source line number.',
        },
        format: {
            type: 'number',
            description: 'Control to show full or partial module, package, and class names.',
            default: '0',
        },
    },
} as const;

export const $Runnable = {
    type: 'object',
    properties: {},
} as const;

export const $Agent = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '',
        },
        userId: {
            type: 'string',
            description: '创建者id',
        },
        workspaceId: {
            type: 'string',
            description: '工作空间id',
        },
        name: {
            type: 'string',
            description: 'agent名称',
        },
        icon: {
            type: 'string',
            description: '图标url',
        },
        description: {
            type: 'string',
            description: '描述,可空',
        },
        prompt: {
            type: 'string',
            description: '提示词',
        },
        llmModelId: {
            type: 'string',
            description: '关联的大模型id',
        },
        toolIds: {
            type: 'array',
            items: {
                type: 'string',
            },
            description: '关联的工具列表',
            default: 'Collections.emptyList()',
        },
        status: {
            type: 'integer',
            description: 'agent状态: 0-初始待发布,1-已发布生效',
            default: 0,
        },
        shareFlag: {
            type: 'boolean',
            description: '是否开启分享',
            default: 'public static final Boolean FALSE = new Boolean(false);',
        },
        temperature: {
            type: 'number',
            description: '温度值',
        },
        topP: {
            type: 'number',
            description: '概率抽样的 p 值',
        },
        maxTokens: {
            type: 'integer',
            description: '最大 token 数',
        },
        createTime: {
            type: 'string',
            description: '',
        },
        updateTime: {
            type: 'string',
            description: '',
        },
    },
} as const;

export const $DefaultCallback = {
    type: 'object',
    properties: {
        delegate: {
            $ref: '#/components/schemas/Runnable',
            description: '',
        },
    },
} as const;

export const $ResponseDataAgent = {
    type: 'object',
    properties: {
        code: {
            type: 'integer',
            description: '状态码',
        },
        message: {
            type: 'string',
            description: '响应信息',
        },
        data: {
            $ref: '#/components/schemas/Agent',
            description: 'agents 数据表',
        },
    },
} as const;

export const $ErrorCallback = {
    type: 'object',
    properties: {},
} as const;

export const $AgentCreateForm = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'agent名称',
        },
        icon: {
            type: 'string',
            description: '图标url',
        },
        description: {
            type: 'string',
            description: '描述,可空',
        },
    },
    required: ['name'],
} as const;

export const $SseEmitter = {
    type: 'object',
    properties: {
        timeout: {
            type: 'integer',
            description: '',
        },
        handler: {
            $ref: '#/components/schemas/Handler',
            description: '',
        },
        earlySendAttempts: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/DataWithMediaType',
                description:
                    'org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.DataWithMediaType',
            },
            description: 'Store send data before handler is initialized.',
            default: 'new LinkedHashSet<>(8)',
        },
        complete: {
            type: 'boolean',
            description: 'Store successful completion before the handler is initialized.',
        },
        failure: {
            $ref: '#/components/schemas/Throwable',
            description: `The throwable that caused this throwable to get thrown, or null if this
throwable was not caused by another throwable, or if the causative
throwable is unknown.  If this field is equal to this throwable itself,
it indicates that the cause of this throwable has not yet been
initialized.`,
            default: 'this',
        },
        timeoutCallback: {
            $ref: '#/components/schemas/DefaultCallback',
            description: '',
            default: 'new DefaultCallback()',
        },
        errorCallback: {
            $ref: '#/components/schemas/ErrorCallback',
            description: '',
            default: 'new ErrorCallback()',
        },
        completionCallback: {
            $ref: '#/components/schemas/DefaultCallback',
            description: '',
            default: 'new DefaultCallback()',
        },
    },
} as const;

export const $AgentDebugDTO = {
    type: 'object',
    properties: {
        agentId: {
            type: 'string',
            description: 'agent id',
        },
        modelId: {
            type: 'string',
            description: '模型id',
        },
        prompt: {
            type: 'string',
            description: '提示词',
        },
        toolIds: {
            type: 'array',
            items: {
                type: 'string',
            },
            description: '工具id',
        },
        temperature: {
            type: 'number',
            description: '温度值',
            maximum: 1,
            minimum: 0,
        },
        topP: {
            type: 'number',
            description: '概率抽样的 p 值',
            maximum: 1,
            minimum: 0,
        },
        maxTokens: {
            type: 'integer',
            description: '最大 token 数',
            minimum: 1,
        },
    },
    required: ['agentId', 'modelId'],
} as const;

export const $AgentUpdateForm = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'agent名称',
        },
        icon: {
            type: 'string',
            description: '图标url',
        },
        description: {
            type: 'string',
            description: '描述,可空',
        },
        prompt: {
            type: 'string',
            description: '提示词',
        },
        llmModelId: {
            type: 'string',
            description: '关联的大模型id',
        },
        toolIds: {
            type: 'array',
            items: {
                type: 'string',
            },
            description: '工具',
        },
        temperature: {
            type: 'number',
            description: '温度值',
            maximum: 1,
            minimum: 0,
        },
        topP: {
            type: 'number',
            description: '概率抽样的 p 值',
            maximum: 1,
            minimum: 0,
        },
        maxTokens: {
            type: 'integer',
            description: '最大 token 数',
            maximum: 4096,
            minimum: 1,
        },
    },
    required: ['name'],
} as const;

export const $AgentSendMsgDTO = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            description: 'text,imageUrl',
        },
        message: {
            type: 'string',
            description: 'type=imageUrl时,格式为: data:image/jpeg;base64,{图片的base64编码}',
        },
    },
    required: ['type', 'message'],
} as const;

export const $FunctionCall = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '',
        },
        name: {
            type: 'string',
            description: '',
        },
        arguments: {
            type: 'array',
            items: {
                type: 'string',
            },
            description: '',
        },
    },
} as const;

export const $OutMessage = {
    type: 'object',
    properties: {
        role: {
            type: 'string',
            description: '',
        },
        type: {
            type: 'string',
            description: '消息类型:text,imageUrl,functionCallList,toolReturn,flag',
        },
        content: {
            $ref: '#/components/schemas/Object',
            description: '',
        },
        createTime: {
            type: 'string',
            description: '',
        },
        toolCalls: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/FunctionCall',
                description: 'com.litevar.agent.base.vo.OutMessage.FunctionCall',
            },
            description: '',
        },
        toolCallId: {
            type: 'string',
            description: '',
        },
    },
} as const;

export const $TokenUsage = {
    type: 'object',
    properties: {
        promptTokens: {
            type: 'integer',
            description: '',
        },
        completionTokens: {
            type: 'integer',
            description: '',
        },
        totalTokens: {
            type: 'integer',
            description: '',
        },
    },
} as const;

export const $TaskMessage = {
    type: 'object',
    properties: {
        taskId: {
            type: 'string',
            description: '',
        },
        message: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/OutMessage',
                description: '输出前端的message',
            },
            description: '',
        },
        tokenUsage: {
            $ref: '#/components/schemas/TokenUsage',
            description: '',
        },
    },
} as const;

export const $ResponseDataListTaskMessage = {
    type: 'object',
    properties: {
        code: {
            type: 'integer',
            description: '状态码',
        },
        message: {
            type: 'string',
            description: '响应信息',
        },
        data: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/TaskMessage',
                description: 'com.litevar.agent.base.entity.AgentChatMessage.TaskMessage',
            },
            description: '响应数据对象',
        },
    },
} as const;

export const $ResponseDataListDict = {
    type: 'object',
    properties: {
        code: {
            type: 'integer',
            description: '状态码',
        },
        message: {
            type: 'string',
            description: '响应信息',
        },
        data: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/Dict',
                description: '响应数据对象',
            },
            description: '响应数据对象',
        },
    },
} as const;

export const $Worker = {
    type: 'object',
    properties: {
        workNo: {
            type: 'string',
            description: '工号',
        },
        username: {
            type: 'string',
            description: '名字',
        },
        job: {
            type: 'string',
            description: '职位',
        },
    },
    required: ['workNo', 'job'],
} as const;

export const $ModelDTO = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '',
        },
        name: {
            type: 'string',
            description: '模型名称',
        },
        baseUrl: {
            type: 'string',
            description: '模型访问url',
        },
        apiKey: {
            type: 'string',
            description: '模型访问key',
        },
        shareFlag: {
            type: 'boolean',
            description: '是否共享',
        },
        userId: {
            type: 'string',
            description: '创建者id',
        },
        maxTokens: {
            type: 'integer',
            description: '限制最大token',
        },
        canEdit: {
            type: 'boolean',
            description: '是否能编辑',
            default: 'public static final Boolean FALSE = new Boolean(false);',
        },
        canDelete: {
            type: 'boolean',
            description: '是否能删除',
            default: 'public static final Boolean FALSE = new Boolean(false);',
        },
        canRead: {
            type: 'boolean',
            description: '是否能读',
            default: 'public static final Boolean TRUE = new Boolean(true);',
        },
    },
} as const;

export const $PageModelModelDTO = {
    type: 'object',
    properties: {
        pageNo: {
            type: 'integer',
            description: '当前第几页',
        },
        pageSize: {
            type: 'integer',
            description: '一页多少条记录',
        },
        total: {
            type: 'integer',
            description: '全部数据量',
        },
        list: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/ModelDTO',
                description: '',
            },
            description: '数据',
        },
    },
} as const;

export const $ResponseDataPageModelModelDTO = {
    type: 'object',
    properties: {
        code: {
            type: 'integer',
            description: '状态码',
        },
        message: {
            type: 'string',
            description: '响应信息',
        },
        data: {
            $ref: '#/components/schemas/PageModelModelDTO',
            description: '响应数据对象',
        },
    },
} as const;
