// This file is auto-generated by @hey-api/openapi-ts

export type ResponseDataString = {
    /**
     * 状态码
     */
    code?: number;
    /**
     * 响应信息
     */
    message?: string;
    /**
     * 响应数据对象
     */
    data?: string;
};

export type ResponseData_String_AddAction = {
    /**
     * 状态码
     */
    code?: number | null;
    /**
     * 响应信息
     */
    message?: string | null;
    /**
     * 响应数据对象
     */
    data?: string | null;
};

export type ToolDTO = {
    /**
     * 工具id
     */
    id?: string;
    /**
     * 工具名称
     */
    name?: string;
    icon?: string;
    /**
     * 描述
     */
    description?: string;
    /**
     * 是否已分享
     */
    shareTip?: boolean;
    /**
     * 是否能编辑
     */
    canEdit?: boolean;
    /**
     * 是否能删除
     */
    canDelete?: boolean;
    /**
     * 是否能读
     */
    canRead?: boolean;
};

export type Account = {
    id?: string;
    /**
     * 昵称
     */
    name?: string;
    /**
     * 邮箱
     */
    email?: string;
    /**
     * 头像
     */
    avatar?: string;
    /**
     * 账号状态
     */
    status?: number;
    createTime?: string;
    updateTime?: string;
};

export type AgentDTO = {
    id?: string;
    /**
     * 创建者id
     */
    userId?: string;
    /**
     * agent名称
     */
    name?: string;
    /**
     * 图标url
     */
    icon?: string;
    /**
     * 描述,可空
     */
    description?: string;
    /**
     * 是否已分享
     */
    shareTip?: boolean;
    /**
     * 是否已发布
     */
    status?: number;
};

export type WorkSpaceVO = {
    /**
     * 工作空间id
     */
    id?: string;
    /**
     * 工作空间名字
     */
    name?: string;
    /**
     * 当前账号在里面的角色
     */
    role?: '0' | '1' | '2' | '3' | 'ROLE_USER' | 'ROLE_ADMIN_DEL' | 'ROLE_DEVELOPER' | 'ROLE_ADMIN';
};

/**
 * 当前账号在里面的角色
 */
export enum role {
    _0 = '0',
    _1 = '1',
    _2 = '2',
    _3 = '3',
    ROLE_USER = 'ROLE_USER',
    ROLE_ADMIN_DEL = 'ROLE_ADMIN_DEL',
    ROLE_DEVELOPER = 'ROLE_DEVELOPER',
    ROLE_ADMIN = 'ROLE_ADMIN',
}

export type ResponseDataInteger = {
    /**
     * 状态码
     */
    code?: number;
    /**
     * 响应信息
     */
    message?: string;
    /**
     * 响应数据对象
     */
    data?: number;
};

export type LlmModel = {
    id?: string;
    /**
     * 模型名称
     */
    name?: string;
    /**
     * 模型访问url
     */
    baseUrl?: string;
    /**
     * 模型访问key
     */
    apiKey?: string;
    /**
     * 创建者id
     */
    userId?: string;
    /**
     * 工作空间id
     */
    workspaceId?: string;
    /**
     * 是否共享
     */
    shareFlag?: boolean;
    createTime?: string;
    updateTime?: string;
};

export type ModelVOAddAction = {
    id?: string;
    /**
     * 模型名字
     */
    name: string;
    /**
     * 请求url
     */
    baseUrl: string;
    /**
     * 接口key
     */
    apiKey: string;
    /**
     * 分享-true,不分享-false
     */
    shareFlag: boolean;
    /**
     * 限制最大token
     */
    maxTokens?: number;
};

export type ResponseDataListToolDTO = {
    /**
     * 状态码
     */
    code?: number;
    /**
     * 响应信息
     */
    message?: string;
    /**
     * 响应数据对象
     */
    data?: Array<ToolDTO>;
};

export type ResponseDataAccount = {
    /**
     * 状态码
     */
    code?: number;
    /**
     * 响应信息
     */
    message?: string;
    /**
     * 响应数据对象
     */
    data?: Account;
};

export type ResponseDataIterableAgent = {
    /**
     * 状态码
     */
    code?: number;
    /**
     * 响应信息
     */
    message?: string;
    /**
     * 响应数据对象
     */
    data?: Array<Agent>;
};

export type ResponseDataListAgentDTO = {
    /**
     * 状态码
     */
    code?: number;
    /**
     * 响应信息
     */
    message?: string;
    /**
     * 响应数据对象
     */
    data?: Array<AgentDTO>;
};

export type ResponseDataListWorkSpaceVO = {
    /**
     * 状态码
     */
    code?: number;
    /**
     * 响应信息
     */
    message?: string;
    /**
     * 响应数据对象
     */
    data?: Array<WorkSpaceVO>;
};

export type ResponseData_LlmModel_ = {
    /**
     * 状态码
     */
    code?: number | null;
    /**
     * 响应信息
     */
    message?: string | null;
    /**
     * 响应数据对象
     */
    data?: LlmModel;
};

export type ToolProvider = {
    id?: string;
    /**
     * 创建人
     */
    userId?: string;
    /**
     * 工作空间id
     */
    workspaceId?: string;
    /**
     * 工具名称
     */
    name?: string;
    icon?: string;
    /**
     * 描述
     */
    description?: string;
    /**
     * schema类型:
     * 1-openapi
     * 2-jsonrpc
     * 3-open_modbus
     */
    schemaType?: number;
    /**
     * 原始schema描述字符串, yml、json
     */
    schemaStr?: string;
    /**
     * 调用工具的apiKey
     */
    apiKey?: string;
    /**
     * apiKey类型: Bearer、Basic
     */
    apiKeyType?: string;
    /**
     * 分享标记
     */
    shareFlag?: boolean;
    createTime?: string;
    updateTime?: string;
};

export type Handler = {
    [key: string]: unknown;
};

export type AgentSessionVO = {
    agentId?: string;
    /**
     * agent名字
     */
    name?: string;
    createTime?: string;
};

export type key = {
    [key: string]: unknown;
};

export type WorkspaceMember = {
    id?: string | null;
    /**
     * 空间id
     */
    workspaceId?: string | null;
    /**
     * 成员用户id
     */
    userId?: string | null;
    /**
     * 成员账号
     */
    email?: string | null;
    /**
     * 空间成员角色
     */
    role?: number | null;
    /**
     * 加入时间
     */
    createTime?: string | null;
};

export type WorkspaceMemberVO = {
    /**
     * 成员id
     */
    id?: string;
    /**
     * 空间id
     */
    workspaceId?: string;
    /**
     * 成员用户id
     */
    userId?: string;
    /**
     * 昵称
     */
    name?: string;
    /**
     * 成员账号
     */
    email?: string;
    /**
     * 空间成员角色
     */
    role?: number;
    /**
     * 加入时间
     */
    createTime?: string;
};

export type ResponseData_String_UpdateAction = {
    /**
     * 状态码
     */
    code?: number | null;
    /**
     * 响应信息
     */
    message?: string | null;
    /**
     * 响应数据对象
     */
    data?: string | null;
};

export type ResponseDataToolProvider = {
    /**
     * 状态码
     */
    code?: number;
    /**
     * 响应信息
     */
    message?: string;
    /**
     * 响应数据对象
     */
    data?: ToolProvider;
};

export type Object = {
    [key: string]: unknown;
};

export type ResponseDataListAgentSessionVO = {
    /**
     * 状态码
     */
    code?: number;
    /**
     * 响应信息
     */
    message?: string;
    /**
     * 响应数据对象
     */
    data?: Array<AgentSessionVO>;
};

export type Dict = {
    key?: key;
};

export type Sort = {
    direction?: 'ASC' | 'DESC' | null;
    property?: string | null;
    ignoreCase?: boolean | null;
    nullHandling?: 'NATIVE' | 'NULLS_FIRST' | 'NULLS_LAST' | null;
    /**
     * Returns whether sorting for this property shall be ascending.
     */
    ascending?: boolean | null;
    /**
     * Returns whether sorting for this property shall be descending.
     */
    descending?: boolean | null;
};

export enum direction {
    ASC = 'ASC',
    DESC = 'DESC',
}

export enum nullHandling {
    NATIVE = 'NATIVE',
    NULLS_FIRST = 'NULLS_FIRST',
    NULLS_LAST = 'NULLS_LAST',
}

export type PageModelWorkspaceMemberVO = {
    /**
     * 当前第几页
     */
    pageNo?: number;
    /**
     * 一页多少条记录
     */
    pageSize?: number;
    /**
     * 全部数据量
     */
    total?: number;
    /**
     * 数据
     */
    list?: Array<WorkspaceMemberVO>;
};

export type ModelVOUpdateAction = {
    id: string;
    /**
     * 模型名字
     */
    name: string;
    /**
     * 请求url
     */
    baseUrl: string;
    /**
     * 接口key
     */
    apiKey: string;
    /**
     * 分享-true,不分享-false
     */
    shareFlag: boolean;
    /**
     * 限制最大token
     */
    maxTokens?: number;
};

export type MapString = {
    key?: string;
};

export type AgentVO = {
    /**
     * agents 数据表
     */
    agent?: Agent;
    /**
     * 响应数据对象
     */
    model?: LlmModel;
    toolList?: Array<ToolProvider>;
};

export type ResponseDataDict = {
    /**
     * 状态码
     */
    code?: number;
    /**
     * 响应信息
     */
    message?: string;
    /**
     * 响应数据对象
     */
    data?: Dict;
};

export type Pageable = {
    /**
     * Returns whether the current{@link Pageable} contains pagination information.
     */
    paged?: boolean | null;
    /**
     * Returns whether the current{@link Pageable} does not contain pagination information.
     */
    unpaged?: boolean | null;
    /**
     * Returns the page to be returned.
     */
    pageNumber?: number | null;
    /**
     * Returns the number of items to be returned.
     */
    pageSize?: number | null;
    /**
     * Returns the offset to be taken according to the underlying page and page size.
     */
    offset?: number | null;
    /**
     * Returns the sorting parameters.
     */
    sort?: Array<Sort> | null;
};

export type ResponseDataPageModelWorkspaceMemberVO = {
    /**
     * 状态码
     */
    code?: number;
    /**
     * 响应信息
     */
    message?: string;
    /**
     * 响应数据对象
     */
    data?: PageModelWorkspaceMemberVO;
};

export type ToolVO = {
    /**
     * 工具id
     */
    id?: string;
    /**
     * 工具名称
     */
    name: string;
    /**
     * 描述
     */
    description?: string;
    /**
     * schema类型
     */
    schemaType: 1 | 2 | 3;
    /**
     * schema文稿
     */
    schemaStr: string;
    /**
     * api key类型:Bearer、Basic
     */
    apiKeyType?: string;
    /**
     * api key 值
     */
    apiKey?: string;
    /**
     * 是否分享
     */
    shareFlag?: boolean;
};

/**
 * schema类型
 */
export enum schemaType {
    '_1' = 1,
    '_2' = 2,
    '_3' = 3,
}

export type ToolVOAddAction = {
    /**
     * 工具id
     */
    id?: string;
    /**
     * 工具名称
     */
    name: string;
    /**
     * 描述
     */
    description?: string;
    /**
     * schema类型
     */
    schemaType: 1 | 2 | 3;
    /**
     * schema文稿
     */
    schemaStr: string;
    /**
     * api key类型:Bearer、Basic
     */
    apiKeyType?: string;
    /**
     * api key 值
     */
    apiKey?: string;
    /**
     * 是否分享
     */
    shareFlag?: boolean;
};

export type MediaType = {
    type?: string;
    subtype?: string;
    parameters?: MapString;
    toStringValue?: string;
};

export type ResponseDataAgentVO = {
    /**
     * 状态码
     */
    code?: number;
    /**
     * 响应信息
     */
    message?: string;
    /**
     * 响应数据对象
     */
    data?: AgentVO;
};

export type AgentDetailVO = {
    /**
     * agents 数据表
     */
    agent?: Agent;
    /**
     * 响应数据对象
     */
    model?: LlmModel;
    toolList?: Array<ToolDTO>;
    /**
     * 是否能编辑
     */
    canEdit?: boolean;
    /**
     * 是否能删除
     */
    canDelete?: boolean;
    /**
     * 是否能发布
     */
    canRelease?: boolean;
};

export type Page_WorkspaceMember_ = {
    content?: Array<WorkspaceMember> | null;
    pageable?: Pageable;
    total?: number | null;
    /**
     * Returns whether the current{@link Streamable} is empty.
     */
    empty?: boolean | null;
    number?: number | null;
    size?: number | null;
    numberOfElements?: number | null;
    sort?: Array<Sort> | null;
    first?: boolean | null;
    last?: boolean | null;
    totalPages?: number | null;
    totalElements?: number | null;
};

export type PageModel_LlmModel_ = {
    /**
     * 当前第几页
     */
    pageNo?: number | null;
    /**
     * 一页多少条记录
     */
    pageSize?: number | null;
    /**
     * 全部数据量
     */
    total?: number | null;
    /**
     * 数据
     */
    list?: Array<LlmModel> | null;
};

export type DataWithMediaType = {
    data?: Object;
    mediaType?: MediaType;
};

export type ResponseDataAgentDetailVO = {
    /**
     * 状态码
     */
    code?: number;
    /**
     * 响应信息
     */
    message?: string;
    /**
     * 响应数据对象
     */
    data?: AgentDetailVO;
};

export type ResponseData_Page_WorkspaceMember__ = {
    /**
     * 状态码
     */
    code?: number | null;
    /**
     * 响应信息
     */
    message?: string | null;
    /**
     * 响应数据对象
     */
    data?: Page_WorkspaceMember_;
};

export type ResponseData_PageModel_LlmModel__ = {
    /**
     * 状态码
     */
    code?: number | null;
    /**
     * 响应信息
     */
    message?: string | null;
    /**
     * 响应数据对象
     */
    data?: PageModel_LlmModel_;
};

export type ToolVOUpdateAction = {
    /**
     * 工具id
     */
    id: string;
    /**
     * 工具名称
     */
    name: string;
    /**
     * 描述
     */
    description?: string;
    /**
     * schema类型
     */
    schemaType: 1 | 2 | 3;
    /**
     * schema文稿
     */
    schemaStr: string;
    /**
     * api key类型:Bearer、Basic
     */
    apiKeyType?: string;
    /**
     * api key 值
     */
    apiKey?: string;
    /**
     * 是否分享
     */
    shareFlag?: boolean;
};

export type Throwable = {
    /**
     * Specific details about the Throwable.  For example, for
     * {@code FileNotFoundException}, this contains the name of
     * the file that could not be found.
     */
    detailMessage?: string;
    /**
     * The throwable that caused this throwable to get thrown, or null if this
     * throwable was not caused by another throwable, or if the causative
     * throwable is unknown.  If this field is equal to this throwable itself,
     * it indicates that the cause of this throwable has not yet been
     * initialized.
     */
    cause?: Throwable;
    /**
     * The stack trace, as returned by{@link #getStackTrace()}.
     *
     * The field is initialized to a zero-length array.  A{@code
     * * null} value of this field indicates subsequent calls to{@link
     * * #setStackTrace(StackTraceElement[])} and{@link
     * * #fillInStackTrace()} will be no-ops.
     */
    stackTrace?: Array<StackTraceElement>;
    /**
     * The list of suppressed exceptions, as returned by{@link
     * * #getSuppressed()}.  The list is initialized to a zero-element
     * unmodifiable sentinel list.  When a serialized Throwable is
     * read in, if the{@code suppressedExceptions} field points to a
     * zero-element list, the field is reset to the sentinel value.
     */
    suppressedExceptions?: Array<Throwable>;
};

export type StackTraceElement__ = {
    /**
     * The name of the class loader.
     */
    classLoaderName?: string;
    /**
     * The module name.
     */
    moduleName?: string;
    /**
     * The module version.
     */
    moduleVersion?: string;
    /**
     * The declaring class.
     */
    declaringClass?: string;
    /**
     * The method name.
     */
    methodName?: string;
    /**
     * The source file name.
     */
    fileName?: string;
    /**
     * The source line number.
     */
    lineNumber?: number;
    /**
     * Control to show full or partial module, package, and class names.
     */
    format?: number;
};

export type Runnable = {
    [key: string]: unknown;
};

export type Agent = {
    id?: string;
    /**
     * 创建者id
     */
    userId?: string;
    /**
     * 工作空间id
     */
    workspaceId?: string;
    /**
     * agent名称
     */
    name?: string;
    /**
     * 图标url
     */
    icon?: string;
    /**
     * 描述,可空
     */
    description?: string;
    /**
     * 提示词
     */
    prompt?: string;
    /**
     * 关联的大模型id
     */
    llmModelId?: string;
    /**
     * 关联的工具列表
     */
    toolIds?: Array<string>;
    /**
     * agent状态: 0-初始待发布,1-已发布生效
     */
    status?: number;
    /**
     * 是否开启分享
     */
    shareFlag?: boolean;
    /**
     * 温度值
     */
    temperature?: number;
    /**
     * 概率抽样的 p 值
     */
    topP?: number;
    /**
     * 最大 token 数
     */
    maxTokens?: number;
    createTime?: string;
    updateTime?: string;
};

export type DefaultCallback = {
    delegate?: Runnable;
};

export type ResponseDataAgent = {
    /**
     * 状态码
     */
    code?: number;
    /**
     * 响应信息
     */
    message?: string;
    /**
     * agents 数据表
     */
    data?: Agent;
};

export type ErrorCallback = {
    [key: string]: unknown;
};

export type AgentCreateForm = {
    /**
     * agent名称
     */
    name: string;
    /**
     * 图标url
     */
    icon?: string;
    /**
     * 描述,可空
     */
    description?: string;
};

export type SseEmitter = {
    timeout?: number;
    handler?: Handler;
    /**
     * Store send data before handler is initialized.
     */
    earlySendAttempts?: Array<DataWithMediaType>;
    /**
     * Store successful completion before the handler is initialized.
     */
    complete?: boolean;
    /**
     * The throwable that caused this throwable to get thrown, or null if this
     * throwable was not caused by another throwable, or if the causative
     * throwable is unknown.  If this field is equal to this throwable itself,
     * it indicates that the cause of this throwable has not yet been
     * initialized.
     */
    failure?: Throwable;
    timeoutCallback?: DefaultCallback;
    errorCallback?: ErrorCallback;
    completionCallback?: DefaultCallback;
};

export type AgentDebugDTO = {
    /**
     * agent id
     */
    agentId: string;
    /**
     * 模型id
     */
    modelId: string;
    /**
     * 提示词
     */
    prompt?: string;
    /**
     * 工具id
     */
    toolIds?: Array<string>;
    /**
     * 温度值
     */
    temperature?: number;
    /**
     * 概率抽样的 p 值
     */
    topP?: number;
    /**
     * 最大 token 数
     */
    maxTokens?: number;
};

export type AgentUpdateForm = {
    /**
     * agent名称
     */
    name: string;
    /**
     * 图标url
     */
    icon?: string;
    /**
     * 描述,可空
     */
    description?: string;
    /**
     * 提示词
     */
    prompt?: string;
    /**
     * 关联的大模型id
     */
    llmModelId?: string;
    /**
     * 工具
     */
    toolIds?: Array<string>;
    /**
     * 温度值
     */
    temperature?: number;
    /**
     * 概率抽样的 p 值
     */
    topP?: number;
    /**
     * 最大 token 数
     */
    maxTokens?: number;
};

export type AgentSendMsgDTO = {
    /**
     * text,imageUrl
     */
    type: string;
    /**
     * type=imageUrl时,格式为: data:image/jpeg;base64,{图片的base64编码}
     */
    message: string;
};

export type FunctionCall = {
    id?: string;
    name?: string;
    arguments?: Array<string>;
};

export type OutMessage = {
    role?: string;
    /**
     * 消息类型:text,imageUrl,functionCallList,toolReturn,flag
     */
    type?: string;
    content?: Object;
    createTime?: string;
    toolCalls?: Array<FunctionCall>;
    toolCallId?: string;
};

export type TokenUsage = {
    promptTokens?: number;
    completionTokens?: number;
    totalTokens?: number;
};

export type TaskMessage = {
    taskId?: string;
    message?: Array<OutMessage>;
    tokenUsage?: TokenUsage;
};

export type ResponseDataListTaskMessage = {
    /**
     * 状态码
     */
    code?: number;
    /**
     * 响应信息
     */
    message?: string;
    /**
     * 响应数据对象
     */
    data?: Array<TaskMessage>;
};

export type ResponseDataListDict = {
    /**
     * 状态码
     */
    code?: number;
    /**
     * 响应信息
     */
    message?: string;
    /**
     * 响应数据对象
     */
    data?: Array<Dict>;
};

export type Worker = {
    /**
     * 工号
     */
    workNo: string;
    /**
     * 名字
     */
    username?: string;
    /**
     * 职位
     */
    job: string;
};

export type ModelDTO = {
    id?: string;
    /**
     * 模型名称
     */
    name?: string;
    /**
     * 模型访问url
     */
    baseUrl?: string;
    /**
     * 模型访问key
     */
    apiKey?: string;
    /**
     * 是否共享
     */
    shareFlag?: boolean;
    /**
     * 创建者id
     */
    userId?: string;
    /**
     * 限制最大token
     */
    maxTokens?: number;
    /**
     * 是否能编辑
     */
    canEdit?: boolean;
    /**
     * 是否能删除
     */
    canDelete?: boolean;
    /**
     * 是否能读
     */
    canRead?: boolean;
};

export type PageModelModelDTO = {
    /**
     * 当前第几页
     */
    pageNo?: number;
    /**
     * 一页多少条记录
     */
    pageSize?: number;
    /**
     * 全部数据量
     */
    total?: number;
    /**
     * 数据
     */
    list?: Array<ModelDTO>;
};

export type ResponseDataPageModelModelDTO = {
    /**
     * 状态码
     */
    code?: number;
    /**
     * 响应信息
     */
    message?: string;
    /**
     * 响应数据对象
     */
    data?: PageModelModelDTO;
};

export type PostV1AuthLoginData = {
    query: {
        /**
         * 邮箱
         */
        email: string;
        /**
         * 密码
         */
        password: string;
    };
};

export type PostV1AuthLoginResponse = ResponseDataString;

export type PostV1AuthLoginError = unknown;

export type PostV1AuthLoginOfInitData = {
    query: {
        /**
         * 邮箱
         */
        email: string;
        /**
         * 密码
         */
        password: string;
        /**
         * 名字
         */
        username: string;
    };
};

export type PostV1AuthLoginOfInitResponse = ResponseDataString;

export type PostV1AuthLoginOfInitError = unknown;

export type GetV1AuthInitStatusResponse = ResponseDataInteger;

export type GetV1AuthInitStatusError = unknown;

export type GetV1ToolListData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
        'Workspace-id': string;
    };
    query: {
        /**
         * 工具名称
         */
        name?: string;
        /**
         * 0-全部,1-系统,2-来自分享,3-我的
         */
        tab: number;
    };
};

export type GetV1ToolListResponse = ResponseDataListToolDTO;

export type GetV1ToolListError = unknown;

export type GetV1ToolDetailByIdData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
    };
    path: {
        /**
         * 工具id
         */
        id: string;
    };
};

export type GetV1ToolDetailByIdResponse = ResponseDataToolProvider;

export type GetV1ToolDetailByIdError = unknown;

export type PostV1ToolAddData = {
    body?: ToolVOAddAction;
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
        /**
         * 工作空间id
         */
        'Workspace-id': string;
    };
};

export type PostV1ToolAddResponse = ResponseDataString;

export type PostV1ToolAddError = unknown;

export type PutV1ToolUpdateData = {
    body?: ToolVOUpdateAction;
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
        /**
         * 工作空间id
         */
        'Workspace-id': string;
    };
};

export type PutV1ToolUpdateResponse = ResponseDataString;

export type PutV1ToolUpdateError = unknown;

export type DeleteV1ToolByIdData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
        /**
         * 工作空间id
         */
        'Workspace-id': string;
    };
    path: {
        /**
         * 工具id
         */
        id: string;
    };
};

export type DeleteV1ToolByIdResponse = ResponseDataString;

export type DeleteV1ToolByIdError = unknown;

export type PostV1ToolCheckSchemaData = {
    body?: {
        /**
         * schema类型
         */
        schemaType: 1 | 2 | 3;
        /**
         * schema文稿
         */
        schemaStr: string;
    };
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
    };
};

export type PostV1ToolCheckSchemaResponse = ResponseDataString;

export type PostV1ToolCheckSchemaError = unknown;

export type PostV1ModelAddData = {
    body?: ModelVOAddAction;
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
        /**
         * 工作空间id
         */
        'Workspace-id': string;
    };
};

export type PostV1ModelAddResponse = ResponseDataString;

export type PostV1ModelAddError = unknown;

export type DeleteV1ModelByIdData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
        /**
         * 工作空间id
         */
        'Workspace-id': string;
    };
    path: {
        /**
         * 模型id
         */
        id: string;
    };
};

export type DeleteV1ModelByIdResponse = ResponseDataString;

export type DeleteV1ModelByIdError = unknown;

export type PutV1ModelUpdateData = {
    body?: ModelVOUpdateAction;
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
        /**
         * 工作空间id
         */
        'Workspace-id': string;
    };
};

export type PutV1ModelUpdateResponse = ResponseDataString;

export type PutV1ModelUpdateError = unknown;

export type GetV1ModelListData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
        'Workspace-id': string;
    };
    query: {
        pageNo: number;
        pageSize: number;
    };
};

export type GetV1ModelListResponse = ResponseDataPageModelModelDTO;

export type GetV1ModelListError = unknown;

export type PostV1WorkspaceAddData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
    };
    query: {
        /**
         * 工作空间名字
         */
        name: string;
    };
};

export type PostV1WorkspaceAddResponse = ResponseDataString;

export type PostV1WorkspaceAddError = unknown;

export type GetV1WorkspaceListData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
    };
    query?: {
        /**
         * 只查管理的工作空间,传1
         */
        adminFlag?: number;
    };
};

export type GetV1WorkspaceListResponse = ResponseDataListWorkSpaceVO;

export type GetV1WorkspaceListError = unknown;

export type GetV1WorkspaceMemberListData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
        /**
         * 工作空间
         */
        'Workspace-id': string;
    };
    query: {
        pageNo: number;
        pageSize: number;
        /**
         * 用户名
         */
        username?: string;
    };
};

export type GetV1WorkspaceMemberListResponse = ResponseDataPageModelWorkspaceMemberVO;

export type GetV1WorkspaceMemberListError = unknown;

export type PostV1WorkspaceMemberData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
        /**
         * 工作空间id
         */
        'Workspace-id': string;
    };
    query: {
        /**
         * 邮箱
         */
        emails: string;
        /**
         * 设定角色(0-普通成员,1-管理员,2-开发者)
         */
        role: number;
    };
};

export type PostV1WorkspaceMemberResponse = ResponseDataString;

export type PostV1WorkspaceMemberError = unknown;

export type DeleteV1WorkspaceMemberByMemberIdData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
        /**
         * 工作空间id
         */
        'Workspace-id': string;
    };
    path: {
        /**
         * 成员id
         */
        memberId: string;
    };
};

export type DeleteV1WorkspaceMemberByMemberIdResponse = ResponseDataString;

export type DeleteV1WorkspaceMemberByMemberIdError = unknown;

export type PutV1WorkspaceMemberByMemberIdData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
        /**
         * 工作空间id
         */
        'Workspace-id': string;
    };
    path: {
        /**
         * 成员id
         */
        memberId: string;
    };
    query: {
        /**
         * 角色
         */
        role: number;
    };
};

export type PutV1WorkspaceMemberByMemberIdResponse = ResponseDataString;

export type PutV1WorkspaceMemberByMemberIdError = unknown;

export type GetV1WorkspaceActivateInfoData = {
    query: {
        /**
         * 激活链接中获取参数
         */
        token: string;
    };
};

export type GetV1WorkspaceActivateInfoResponse = ResponseDataDict;

export type GetV1WorkspaceActivateInfoError = unknown;

export type PostV1WorkspaceActivateMemberData = {
    query: {
        /**
         * 密码
         */
        password: string;
        /**
         * 激活链接中获取参数
         */
        token: string;
        /**
         * 昵称
         */
        username: string;
    };
};

export type PostV1WorkspaceActivateMemberResponse = ResponseDataString;

export type PostV1WorkspaceActivateMemberError = unknown;

export type GetV1AgentListData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
        'Workspace-id': string;
    };
    query: {
        /**
         * agent名称
         */
        name?: string;
        /**
         * 0-全部,1-系统,2-来自分享,3-我的
         */
        tab: number;
    };
};

export type GetV1AgentListResponse = ResponseDataListAgentDTO;

export type GetV1AgentListError = unknown;

export type GetV1AgentAdminListData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
        'Workspace-id': string;
    };
    query: {
        /**
         * agent名称
         */
        name?: string;
        /**
         * 0-全部,1-系统,2-来自分享,3-我的
         */
        tab: number;
    };
};

export type GetV1AgentAdminListResponse = ResponseDataListAgentDTO;

export type GetV1AgentAdminListError = unknown;

export type GetV1AgentByIdData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
    };
    path: {
        /**
         * agent id
         */
        id: string;
    };
};

export type GetV1AgentByIdResponse = ResponseDataAgentDetailVO;

export type GetV1AgentByIdError = unknown;

export type DeleteV1AgentByIdData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
        /**
         * 工作空间id
         */
        'Workspace-id': string;
    };
    path: {
        /**
         * agent id
         */
        id: string;
    };
};

export type DeleteV1AgentByIdResponse = ResponseDataString;

export type DeleteV1AgentByIdError = unknown;

export type PutV1AgentByIdData = {
    body?: AgentUpdateForm;
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
        /**
         * 工作空间id
         */
        'Workspace-id': string;
    };
    path: {
        /**
         * agentId
         */
        id: string;
    };
};

export type PutV1AgentByIdResponse = ResponseDataAgent;

export type PutV1AgentByIdError = unknown;

export type GetV1AgentAdminInfoByIdData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
    };
    path: {
        id: string;
    };
};

export type GetV1AgentAdminInfoByIdResponse = ResponseDataAgentDetailVO;

export type GetV1AgentAdminInfoByIdError = unknown;

export type PostV1AgentAddData = {
    body?: AgentCreateForm;
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
        /**
         * 工作空间id
         */
        'Workspace-id': string;
    };
};

export type PostV1AgentAddResponse = ResponseDataAgent;

export type PostV1AgentAddError = unknown;

export type PostV1AgentEnableShareByIdData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
        /**
         * 工作空间id
         */
        'Workspace-id': string;
    };
    path: {
        /**
         * agent id
         */
        id: string;
    };
};

export type PostV1AgentEnableShareByIdResponse = ResponseDataString;

export type PostV1AgentEnableShareByIdError = unknown;

export type PutV1AgentReleaseByIdData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
        /**
         * 工作空间id
         */
        'Workspace-id': string;
    };
    path: {
        /**
         * agent id
         */
        id: string;
    };
};

export type PutV1AgentReleaseByIdResponse = ResponseDataString;

export type PutV1AgentReleaseByIdError = unknown;

export type PostV1ChatInitSessionData = {
    body?: AgentDebugDTO;
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
    };
};

export type PostV1ChatInitSessionResponse = ResponseDataString;

export type PostV1ChatInitSessionError = unknown;

export type GetV1ChatStreamData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
    };
    query: {
        sessionId: string;
    };
};

export type GetV1ChatStreamResponse = SseEmitter;

export type GetV1ChatStreamError = unknown;

export type PostV1ChatInitSessionByAgentIdData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
    };
    path: {
        agentId: string;
    };
};

export type PostV1ChatInitSessionByAgentIdResponse = ResponseDataString;

export type PostV1ChatInitSessionByAgentIdError = unknown;

export type PostV1ChatStreamBySessionIdData = {
    body?: Array<AgentSendMsgDTO>;
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
    };
    path: {
        /**
         * 会话id
         */
        sessionId: string;
    };
};

export type PostV1ChatStreamBySessionIdResponse = SseEmitter;

export type PostV1ChatStreamBySessionIdError = unknown;

export type PostV1ChatClearSessionData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
    };
    query: {
        sessionId: string;
    };
};

export type PostV1ChatClearSessionResponse = ResponseDataString;

export type PostV1ChatClearSessionError = unknown;

export type PostV1ChatSendBySessionIdData = {
    body?: Array<AgentSendMsgDTO>;
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
    };
    path: {
        /**
         * 会话id
         */
        sessionId: string;
    };
};

export type PostV1ChatSendBySessionIdResponse = ResponseDataString;

export type PostV1ChatSendBySessionIdError = unknown;

export type PostV1ChatClearDebugRecordData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
    };
    query: {
        agentId: string;
    };
};

export type PostV1ChatClearDebugRecordResponse = ResponseDataString;

export type PostV1ChatClearDebugRecordError = unknown;

export type GetV1ChatRecentAgentData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
        'Workspace-id': string;
    };
};

export type GetV1ChatRecentAgentResponse = ResponseDataListAgentSessionVO;

export type GetV1ChatRecentAgentError = unknown;

export type GetV1ChatAgentChatByAgentIdData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
    };
    path: {
        agentId: string;
    };
    query: {
        /**
         * 0-正常聊天,1-调试
         */
        debugFlag: number;
    };
};

export type GetV1ChatAgentChatByAgentIdResponse = ResponseDataListTaskMessage;

export type GetV1ChatAgentChatByAgentIdError = unknown;

export type GetV1UserInfoData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
    };
};

export type GetV1UserInfoResponse = ResponseDataAccount;

export type GetV1UserInfoError = unknown;

export type PutV1UserUpdateData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
    };
    query: {
        /**
         * 头像url
         */
        avatar?: string;
        /**
         * 昵称
         */
        name: string;
    };
};

export type PutV1UserUpdateResponse = ResponseDataString;

export type PutV1UserUpdateError = unknown;

export type PutV1UserUpdatePwdData = {
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
    };
    query: {
        /**
         * 新密码
         */
        newPwd: string;
        /**
         * 旧密码
         */
        originPwd: string;
    };
};

export type PutV1UserUpdatePwdResponse = ResponseDataString;

export type PutV1UserUpdatePwdError = unknown;

export type PostV1FileUploadData = {
    body?: {
        file: Blob | File;
    };
    headers?: {
        /**
         * 认证 Token
         */
        Authorization?: string;
    };
};

export type PostV1FileUploadResponse = ResponseDataString;

export type PostV1FileUploadError = unknown;

export type GetV1FileDownloadData = {
    query: {
        filename: string;
    };
};

export type GetV1FileDownloadResponse = {
    [key: string]: unknown;
};

export type GetV1FileDownloadError = unknown;

export type $OpenApiTs = {
    '/v1/auth/login': {
        post: {
            req: PostV1AuthLoginData;
            res: {
                '200': ResponseDataString;
            };
        };
    };
    '/v1/auth/loginOfInit': {
        post: {
            req: PostV1AuthLoginOfInitData;
            res: {
                '200': ResponseDataString;
            };
        };
    };
    '/v1/auth/initStatus': {
        get: {
            res: {
                '200': ResponseDataInteger;
            };
        };
    };
    '/v1/tool/list': {
        get: {
            req: GetV1ToolListData;
            res: {
                '200': ResponseDataListToolDTO;
            };
        };
    };
    '/v1/tool/detail/{id}': {
        get: {
            req: GetV1ToolDetailByIdData;
            res: {
                '200': ResponseDataToolProvider;
            };
        };
    };
    '/v1/tool/add': {
        post: {
            req: PostV1ToolAddData;
            res: {
                '200': ResponseDataString;
            };
        };
    };
    '/v1/tool/update': {
        put: {
            req: PutV1ToolUpdateData;
            res: {
                '200': ResponseDataString;
            };
        };
    };
    '/v1/tool/{id}': {
        delete: {
            req: DeleteV1ToolByIdData;
            res: {
                '200': ResponseDataString;
            };
        };
    };
    '/v1/tool/checkSchema': {
        post: {
            req: PostV1ToolCheckSchemaData;
            res: {
                '200': ResponseDataString;
            };
        };
    };
    '/v1/model/add': {
        post: {
            req: PostV1ModelAddData;
            res: {
                '200': ResponseDataString;
            };
        };
    };
    '/v1/model/{id}': {
        delete: {
            req: DeleteV1ModelByIdData;
            res: {
                '200': ResponseDataString;
            };
        };
    };
    '/v1/model/update': {
        put: {
            req: PutV1ModelUpdateData;
            res: {
                '200': ResponseDataString;
            };
        };
    };
    '/v1/model/list': {
        get: {
            req: GetV1ModelListData;
            res: {
                '200': ResponseDataPageModelModelDTO;
            };
        };
    };
    '/v1/workspace/add': {
        post: {
            req: PostV1WorkspaceAddData;
            res: {
                '200': ResponseDataString;
            };
        };
    };
    '/v1/workspace/list': {
        get: {
            req: GetV1WorkspaceListData;
            res: {
                '200': ResponseDataListWorkSpaceVO;
            };
        };
    };
    '/v1/workspace/memberList': {
        get: {
            req: GetV1WorkspaceMemberListData;
            res: {
                '200': ResponseDataPageModelWorkspaceMemberVO;
            };
        };
    };
    '/v1/workspace/member': {
        post: {
            req: PostV1WorkspaceMemberData;
            res: {
                '200': ResponseDataString;
            };
        };
    };
    '/v1/workspace/member/{memberId}': {
        delete: {
            req: DeleteV1WorkspaceMemberByMemberIdData;
            res: {
                '200': ResponseDataString;
            };
        };
        put: {
            req: PutV1WorkspaceMemberByMemberIdData;
            res: {
                '200': ResponseDataString;
            };
        };
    };
    '/v1/workspace/activateInfo': {
        get: {
            req: GetV1WorkspaceActivateInfoData;
            res: {
                '200': ResponseDataDict;
            };
        };
    };
    '/v1/workspace/activateMember': {
        post: {
            req: PostV1WorkspaceActivateMemberData;
            res: {
                '200': ResponseDataString;
            };
        };
    };
    '/v1/agent/list': {
        get: {
            req: GetV1AgentListData;
            res: {
                '200': ResponseDataListAgentDTO;
            };
        };
    };
    '/v1/agent/adminList': {
        get: {
            req: GetV1AgentAdminListData;
            res: {
                '200': ResponseDataListAgentDTO;
            };
        };
    };
    '/v1/agent/{id}': {
        get: {
            req: GetV1AgentByIdData;
            res: {
                '200': ResponseDataAgentDetailVO;
            };
        };
        delete: {
            req: DeleteV1AgentByIdData;
            res: {
                '200': ResponseDataString;
            };
        };
        put: {
            req: PutV1AgentByIdData;
            res: {
                '200': ResponseDataAgent;
            };
        };
    };
    '/v1/agent/adminInfo/{id}': {
        get: {
            req: GetV1AgentAdminInfoByIdData;
            res: {
                '200': ResponseDataAgentDetailVO;
            };
        };
    };
    '/v1/agent/add': {
        post: {
            req: PostV1AgentAddData;
            res: {
                '200': ResponseDataAgent;
            };
        };
    };
    '/v1/agent/enableShare/{id}': {
        post: {
            req: PostV1AgentEnableShareByIdData;
            res: {
                '200': ResponseDataString;
            };
        };
    };
    '/v1/agent/release/{id}': {
        put: {
            req: PutV1AgentReleaseByIdData;
            res: {
                '200': ResponseDataString;
            };
        };
    };
    '/v1/chat/initSession': {
        post: {
            req: PostV1ChatInitSessionData;
            res: {
                '200': ResponseDataString;
            };
        };
    };
    '/v1/chat/stream': {
        get: {
            req: GetV1ChatStreamData;
            res: {
                '200': SseEmitter;
            };
        };
    };
    '/v1/chat/initSession/{agentId}': {
        post: {
            req: PostV1ChatInitSessionByAgentIdData;
            res: {
                '200': ResponseDataString;
            };
        };
    };
    '/v1/chat/stream/{sessionId}': {
        post: {
            req: PostV1ChatStreamBySessionIdData;
            res: {
                '200': SseEmitter;
            };
        };
    };
    '/v1/chat/clearSession': {
        post: {
            req: PostV1ChatClearSessionData;
            res: {
                '200': ResponseDataString;
            };
        };
    };
    '/v1/chat/send/{sessionId}': {
        post: {
            req: PostV1ChatSendBySessionIdData;
            res: {
                '200': ResponseDataString;
            };
        };
    };
    '/v1/chat/clearDebugRecord': {
        post: {
            req: PostV1ChatClearDebugRecordData;
            res: {
                '200': ResponseDataString;
            };
        };
    };
    '/v1/chat/recentAgent': {
        get: {
            req: GetV1ChatRecentAgentData;
            res: {
                '200': ResponseDataListAgentSessionVO;
            };
        };
    };
    '/v1/chat/agentChat/{agentId}': {
        get: {
            req: GetV1ChatAgentChatByAgentIdData;
            res: {
                '200': ResponseDataListTaskMessage;
            };
        };
    };
    '/v1/user/info': {
        get: {
            req: GetV1UserInfoData;
            res: {
                '200': ResponseDataAccount;
            };
        };
    };
    '/v1/user/update': {
        put: {
            req: PutV1UserUpdateData;
            res: {
                '200': ResponseDataString;
            };
        };
    };
    '/v1/user/updatePwd': {
        put: {
            req: PutV1UserUpdatePwdData;
            res: {
                '200': ResponseDataString;
            };
        };
    };
    '/v1/file/upload': {
        post: {
            req: PostV1FileUploadData;
            res: {
                '200': ResponseDataString;
            };
        };
    };
    '/v1/file/download': {
        get: {
            req: GetV1FileDownloadData;
            res: {
                '200': {
                    [key: string]: unknown;
                };
            };
        };
    };
};

export type GetV1ChatStreamResponseTransformer = (data: any) => Promise<GetV1ChatStreamResponse>;

export type SseEmitterModelResponseTransformer = (data: any) => SseEmitter;

export type ThrowableModelResponseTransformer = (data: any) => Throwable;

export const ThrowableModelResponseTransformer: ThrowableModelResponseTransformer = (data) => {
    if (data?.cause) {
        ThrowableModelResponseTransformer(data.cause);
    }
    if (Array.isArray(data?.suppressedExceptions)) {
        data.suppressedExceptions.forEach(ThrowableModelResponseTransformer);
    }
    return data;
};

export const SseEmitterModelResponseTransformer: SseEmitterModelResponseTransformer = (data) => {
    if (data?.failure) {
        ThrowableModelResponseTransformer(data.failure);
    }
    return data;
};

export const GetV1ChatStreamResponseTransformer: GetV1ChatStreamResponseTransformer = async (data) => {
    SseEmitterModelResponseTransformer(data);
    return data;
};

export type PostV1ChatStreamBySessionIdResponseTransformer = (
    data: any
) => Promise<PostV1ChatStreamBySessionIdResponse>;

export const PostV1ChatStreamBySessionIdResponseTransformer: PostV1ChatStreamBySessionIdResponseTransformer =
    async (data) => {
        SseEmitterModelResponseTransformer(data);
        return data;
    };
