// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import { type UseMutationOptions, queryOptions } from '@tanstack/react-query';
import {
  postV1AuthLogin,
  postV1AuthLoginOfInit,
  getV1AuthInitStatus,
  getV1ToolList,
  getV1ToolDetailById,
  postV1ToolAdd,
  putV1ToolUpdate,
  deleteV1ToolById,
  postV1ModelAdd,
  deleteV1ModelById,
  putV1ModelUpdate,
  getV1ModelList,
  postV1WorkspaceAdd,
  getV1WorkspaceList,
  getV1WorkspaceMemberList,
  postV1WorkspaceMember,
  deleteV1WorkspaceMemberByMemberId,
  putV1WorkspaceMemberByMemberId,
  getV1WorkspaceActivateInfo,
  postV1WorkspaceActivateMember,
  getV1AgentById,
  deleteV1AgentById,
  putV1AgentById,
  postV1AgentAdd,
  postV1AgentEnableShareById,
  getV1ChatStream,
  postV1ChatInitSessionByAgentId,
  getV1UserInfo,
  putV1UserUpdate,
  putV1UserUpdatePwd,
  getV1AgentList,
  postV1ChatInitSession,
  getV1ChatRecentAgent,
  getV1ChatAgentChatByAgentId,
  postV1ChatSendBySessionId,
  getV1AgentAdminList,
  getV1AgentAdminInfoById,
  putV1AgentReleaseById,
  postV1FileUpload,
  getV1FileDownload,
  postV1ChatClearSession,
  postV1ToolCheckSchema,
  postV1ChatClearDebugRecord,
  postV1AuthLogout,
  getV1ToolListWithFunction,
  postV1DatasetAdd,
  getV1DatasetById,
  putV1DatasetById,
  deleteV1DatasetById,
  getV1DatasetListDatasetsByAgent,
  putV1DatasetByIdShare,
  getV1DatasetByIdRetrieveHistory,
  postV1DatasetByDatasetIdDocuments,
  getV1DatasetByDatasetIdDocuments,
  putV1DatasetDocumentsByDocumentIdRename,
  deleteV1DatasetDocumentsByDocumentId,
  deleteV1DatasetDocumentsBatchDelete,
  getV1DatasetDocumentsByDocumentIdSegments,
  postV1DatasetDocumentsByDocumentIdSegments,
  putV1DatasetDocumentsByDocumentIdEnable,
  putV1DatasetSegmentsBySegmentIdEnable,
  getV1DatasetDocumentsByDocumentIdSegmentsSearchByText,
  putV1DatasetSegmentsBySegmentId,
  deleteV1DatasetSegmentsBySegmentId,
  getV1DatasetByIdRetrieve,
  getV1DatasetByIdApiKeyGenerate,
  postV1AgentGenerateApiKeyById,
  postV1DatasetDocumentsSplit,
  deleteV1DatasetSegmentsBatchDelete,
  getV1DatasetList,
  postV1AgentResetSequenceByAgentId,
  getV1DatasetByIdRetrieveExternal,
  getV1DatasetRetrieveHistoryById,
  postV1UserResetPwdCaptcha,
  postV1UserResetPwdCaptchaVerify,
  getV1UserResetPwdByUuid,
  postV1UserResetPwdByUuid,
  postV1ChatAudioTranscriptions,
  postV1ChatAudioSpeech,
  getV1ChatAudioSpeech,
  postV1UserResetPwdConfirm,
  getV1ChatAgentChat,
  getV1ModelProviders,
  postV1ChatStreamBySessionId,
  getApiChatbotV1DeviceList,
} from '../services.gen';
import type {
  PostV1AuthLoginData,
  PostV1AuthLoginError,
  PostV1AuthLoginResponse,
  PostV1AuthLoginOfInitData,
  PostV1AuthLoginOfInitError,
  PostV1AuthLoginOfInitResponse,
  GetV1ToolListData,
  GetV1ToolDetailByIdData,
  PostV1ToolAddData,
  PostV1ToolAddError,
  PostV1ToolAddResponse,
  PutV1ToolUpdateData,
  PutV1ToolUpdateError,
  PutV1ToolUpdateResponse,
  DeleteV1ToolByIdData,
  DeleteV1ToolByIdError,
  DeleteV1ToolByIdResponse,
  PostV1ModelAddData,
  PostV1ModelAddError,
  PostV1ModelAddResponse,
  DeleteV1ModelByIdData,
  DeleteV1ModelByIdError,
  DeleteV1ModelByIdResponse,
  PutV1ModelUpdateData,
  PutV1ModelUpdateError,
  PutV1ModelUpdateResponse,
  GetV1ModelListData,
  PostV1WorkspaceAddData,
  PostV1WorkspaceAddError,
  PostV1WorkspaceAddResponse,
  GetV1WorkspaceListData,
  GetV1WorkspaceMemberListData,
  PostV1WorkspaceMemberData,
  PostV1WorkspaceMemberError,
  PostV1WorkspaceMemberResponse,
  DeleteV1WorkspaceMemberByMemberIdData,
  DeleteV1WorkspaceMemberByMemberIdError,
  DeleteV1WorkspaceMemberByMemberIdResponse,
  PutV1WorkspaceMemberByMemberIdData,
  PutV1WorkspaceMemberByMemberIdError,
  PutV1WorkspaceMemberByMemberIdResponse,
  GetV1WorkspaceActivateInfoData,
  PostV1WorkspaceActivateMemberData,
  PostV1WorkspaceActivateMemberError,
  PostV1WorkspaceActivateMemberResponse,
  GetV1AgentByIdData,
  DeleteV1AgentByIdData,
  DeleteV1AgentByIdError,
  DeleteV1AgentByIdResponse,
  PutV1AgentByIdData,
  PutV1AgentByIdError,
  PutV1AgentByIdResponse,
  PostV1AgentAddData,
  PostV1AgentAddError,
  PostV1AgentAddResponse,
  PostV1AgentEnableShareByIdData,
  PostV1AgentEnableShareByIdError,
  PostV1AgentEnableShareByIdResponse,
  GetV1ChatStreamData,
  PostV1ChatInitSessionByAgentIdData,
  PostV1ChatInitSessionByAgentIdError,
  PostV1ChatInitSessionByAgentIdResponse,
  GetV1UserInfoData,
  PutV1UserUpdateData,
  PutV1UserUpdateError,
  PutV1UserUpdateResponse,
  PutV1UserUpdatePwdData,
  PutV1UserUpdatePwdError,
  PutV1UserUpdatePwdResponse,
  GetV1AgentListData,
  PostV1ChatInitSessionData,
  PostV1ChatInitSessionError,
  PostV1ChatInitSessionResponse,
  GetV1ChatRecentAgentData,
  GetV1ChatAgentChatByAgentIdData,
  PostV1ChatSendBySessionIdData,
  PostV1ChatSendBySessionIdError,
  PostV1ChatSendBySessionIdResponse,
  GetV1AgentAdminListData,
  GetV1AgentAdminInfoByIdData,
  PutV1AgentReleaseByIdData,
  PutV1AgentReleaseByIdError,
  PutV1AgentReleaseByIdResponse,
  PostV1FileUploadData,
  PostV1FileUploadError,
  PostV1FileUploadResponse,
  GetV1FileDownloadData,
  PostV1ChatClearSessionData,
  PostV1ChatClearSessionError,
  PostV1ChatClearSessionResponse,
  PostV1ToolCheckSchemaData,
  PostV1ToolCheckSchemaError,
  PostV1ToolCheckSchemaResponse,
  PostV1ChatClearDebugRecordData,
  PostV1ChatClearDebugRecordError,
  PostV1ChatClearDebugRecordResponse,
  PostV1AuthLogoutData,
  PostV1AuthLogoutError,
  PostV1AuthLogoutResponse,
  GetV1ToolListWithFunctionData,
  PostV1DatasetAddData,
  PostV1DatasetAddError,
  PostV1DatasetAddResponse,
  GetV1DatasetByIdData,
  PutV1DatasetByIdData,
  PutV1DatasetByIdError,
  PutV1DatasetByIdResponse,
  DeleteV1DatasetByIdData,
  DeleteV1DatasetByIdError,
  DeleteV1DatasetByIdResponse,
  GetV1DatasetListDatasetsByAgentData,
  PutV1DatasetByIdShareData,
  PutV1DatasetByIdShareError,
  PutV1DatasetByIdShareResponse,
  GetV1DatasetByIdRetrieveHistoryData,
  PostV1DatasetByDatasetIdDocumentsData,
  PostV1DatasetByDatasetIdDocumentsError,
  PostV1DatasetByDatasetIdDocumentsResponse,
  GetV1DatasetByDatasetIdDocumentsData,
  PutV1DatasetDocumentsByDocumentIdRenameData,
  PutV1DatasetDocumentsByDocumentIdRenameError,
  PutV1DatasetDocumentsByDocumentIdRenameResponse,
  DeleteV1DatasetDocumentsByDocumentIdData,
  DeleteV1DatasetDocumentsByDocumentIdError,
  DeleteV1DatasetDocumentsByDocumentIdResponse,
  DeleteV1DatasetDocumentsBatchDeleteData,
  DeleteV1DatasetDocumentsBatchDeleteError,
  DeleteV1DatasetDocumentsBatchDeleteResponse,
  GetV1DatasetDocumentsByDocumentIdSegmentsData,
  PostV1DatasetDocumentsByDocumentIdSegmentsData,
  PostV1DatasetDocumentsByDocumentIdSegmentsError,
  PostV1DatasetDocumentsByDocumentIdSegmentsResponse,
  PutV1DatasetDocumentsByDocumentIdEnableData,
  PutV1DatasetDocumentsByDocumentIdEnableError,
  PutV1DatasetDocumentsByDocumentIdEnableResponse,
  PutV1DatasetSegmentsBySegmentIdEnableData,
  PutV1DatasetSegmentsBySegmentIdEnableError,
  PutV1DatasetSegmentsBySegmentIdEnableResponse,
  GetV1DatasetDocumentsByDocumentIdSegmentsSearchByTextData,
  PutV1DatasetSegmentsBySegmentIdData,
  PutV1DatasetSegmentsBySegmentIdError,
  PutV1DatasetSegmentsBySegmentIdResponse,
  DeleteV1DatasetSegmentsBySegmentIdData,
  DeleteV1DatasetSegmentsBySegmentIdError,
  DeleteV1DatasetSegmentsBySegmentIdResponse,
  GetV1DatasetByIdRetrieveData,
  GetV1DatasetByIdApiKeyGenerateData,
  PostV1AgentGenerateApiKeyByIdData,
  PostV1AgentGenerateApiKeyByIdError,
  PostV1AgentGenerateApiKeyByIdResponse,
  PostV1DatasetDocumentsSplitData,
  PostV1DatasetDocumentsSplitError,
  PostV1DatasetDocumentsSplitResponse,
  DeleteV1DatasetSegmentsBatchDeleteData,
  DeleteV1DatasetSegmentsBatchDeleteError,
  DeleteV1DatasetSegmentsBatchDeleteResponse,
  GetV1DatasetListData,
  PostV1AgentResetSequenceByAgentIdData,
  PostV1AgentResetSequenceByAgentIdError,
  PostV1AgentResetSequenceByAgentIdResponse,
  GetV1DatasetByIdRetrieveExternalData,
  GetV1DatasetRetrieveHistoryByIdData,
  PostV1UserResetPwdCaptchaData,
  PostV1UserResetPwdCaptchaError,
  PostV1UserResetPwdCaptchaResponse,
  PostV1UserResetPwdCaptchaVerifyData,
  PostV1UserResetPwdCaptchaVerifyError,
  PostV1UserResetPwdCaptchaVerifyResponse,
  GetV1UserResetPwdByUuidData,
  PostV1UserResetPwdByUuidData,
  PostV1UserResetPwdByUuidError,
  PostV1UserResetPwdByUuidResponse,
  PostV1ChatAudioTranscriptionsData,
  PostV1ChatAudioTranscriptionsError,
  PostV1ChatAudioTranscriptionsResponse,
  PostV1ChatAudioSpeechData,
  PostV1ChatAudioSpeechError,
  PostV1ChatAudioSpeechResponse,
  GetV1ChatAudioSpeechData,
  PostV1UserResetPwdConfirmData,
  PostV1UserResetPwdConfirmError,
  PostV1UserResetPwdConfirmResponse,
  GetV1ChatAgentChatData,
  GetV1ModelProvidersData,
  PostV1ChatStreamBySessionIdData,
  PostV1ChatStreamBySessionIdError,
  PostV1ChatStreamBySessionIdResponse,
  GetApiChatbotV1DeviceListData,
} from '../types.gen';

export const postV1AuthLoginOptions = (options: Options<PostV1AuthLoginData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1AuthLogin({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1AuthLogin',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1AuthLoginMutation: UseMutationOptions<
  PostV1AuthLoginResponse,
  PostV1AuthLoginError,
  Options<PostV1AuthLoginData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1AuthLogin({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const postV1AuthLoginOfInitOptions = (options: Options<PostV1AuthLoginOfInitData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1AuthLoginOfInit({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1AuthLoginOfInit',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1AuthLoginOfInitMutation: UseMutationOptions<
  PostV1AuthLoginOfInitResponse,
  PostV1AuthLoginOfInitError,
  Options<PostV1AuthLoginOfInitData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1AuthLoginOfInit({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1AuthInitStatusOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1AuthInitStatus({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1AuthInitStatus',
        params: {
          body: options?.body,
          headers: options?.headers,
          path: options?.path,
          query: options?.query,
        },
      },
    ],
  });
};

export const getV1ToolListOptions = (options: Options<GetV1ToolListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1ToolList({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1ToolList',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const getV1ToolDetailByIdOptions = (options: Options<GetV1ToolDetailByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1ToolDetailById({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1ToolDetailById',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1ToolAddOptions = (options: Options<PostV1ToolAddData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1ToolAdd({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1ToolAdd',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1ToolAddMutation: UseMutationOptions<
  PostV1ToolAddResponse,
  PostV1ToolAddError,
  Options<PostV1ToolAddData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1ToolAdd({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const putV1ToolUpdateOptions = (options: Options<PutV1ToolUpdateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await putV1ToolUpdate({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'putV1ToolUpdate',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const putV1ToolUpdateMutation: UseMutationOptions<
  PutV1ToolUpdateResponse,
  PutV1ToolUpdateError,
  Options<PutV1ToolUpdateData>
> = {
  mutationFn: async (options) => {
    const { data } = await putV1ToolUpdate({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const deleteV1ToolByIdOptions = (options: Options<DeleteV1ToolByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await deleteV1ToolById({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'deleteV1ToolById',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const deleteV1ToolByIdMutation: UseMutationOptions<
  DeleteV1ToolByIdResponse,
  DeleteV1ToolByIdError,
  Options<DeleteV1ToolByIdData>
> = {
  mutationFn: async (options) => {
    const { data } = await deleteV1ToolById({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const postV1ModelAddOptions = (options: Options<PostV1ModelAddData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1ModelAdd({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1ModelAdd',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1ModelAddMutation: UseMutationOptions<
  PostV1ModelAddResponse,
  PostV1ModelAddError,
  Options<PostV1ModelAddData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1ModelAdd({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const deleteV1ModelByIdOptions = (options: Options<DeleteV1ModelByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await deleteV1ModelById({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'deleteV1ModelById',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const deleteV1ModelByIdMutation: UseMutationOptions<
  DeleteV1ModelByIdResponse,
  DeleteV1ModelByIdError,
  Options<DeleteV1ModelByIdData>
> = {
  mutationFn: async (options) => {
    const { data } = await deleteV1ModelById({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const putV1ModelUpdateOptions = (options: Options<PutV1ModelUpdateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await putV1ModelUpdate({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'putV1ModelUpdate',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const putV1ModelUpdateMutation: UseMutationOptions<
  PutV1ModelUpdateResponse,
  PutV1ModelUpdateError,
  Options<PutV1ModelUpdateData>
> = {
  mutationFn: async (options) => {
    const { data } = await putV1ModelUpdate({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1ModelListOptions = (options: Options<GetV1ModelListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1ModelList({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1ModelList',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1WorkspaceAddOptions = (options: Options<PostV1WorkspaceAddData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1WorkspaceAdd({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1WorkspaceAdd',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1WorkspaceAddMutation: UseMutationOptions<
  PostV1WorkspaceAddResponse,
  PostV1WorkspaceAddError,
  Options<PostV1WorkspaceAddData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1WorkspaceAdd({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1WorkspaceListOptions = (options: Options<GetV1WorkspaceListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1WorkspaceList({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1WorkspaceList',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const getV1WorkspaceMemberListOptions = (options: Options<GetV1WorkspaceMemberListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1WorkspaceMemberList({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1WorkspaceMemberList',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1WorkspaceMemberOptions = (options: Options<PostV1WorkspaceMemberData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1WorkspaceMember({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1WorkspaceMember',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1WorkspaceMemberMutation: UseMutationOptions<
  PostV1WorkspaceMemberResponse,
  PostV1WorkspaceMemberError,
  Options<PostV1WorkspaceMemberData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1WorkspaceMember({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const deleteV1WorkspaceMemberByMemberIdOptions = (
  options: Options<DeleteV1WorkspaceMemberByMemberIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await deleteV1WorkspaceMemberByMemberId({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'deleteV1WorkspaceMemberByMemberId',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const deleteV1WorkspaceMemberByMemberIdMutation: UseMutationOptions<
  DeleteV1WorkspaceMemberByMemberIdResponse,
  DeleteV1WorkspaceMemberByMemberIdError,
  Options<DeleteV1WorkspaceMemberByMemberIdData>
> = {
  mutationFn: async (options) => {
    const { data } = await deleteV1WorkspaceMemberByMemberId({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const putV1WorkspaceMemberByMemberIdOptions = (
  options: Options<PutV1WorkspaceMemberByMemberIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await putV1WorkspaceMemberByMemberId({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'putV1WorkspaceMemberByMemberId',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const putV1WorkspaceMemberByMemberIdMutation: UseMutationOptions<
  PutV1WorkspaceMemberByMemberIdResponse,
  PutV1WorkspaceMemberByMemberIdError,
  Options<PutV1WorkspaceMemberByMemberIdData>
> = {
  mutationFn: async (options) => {
    const { data } = await putV1WorkspaceMemberByMemberId({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1WorkspaceActivateInfoOptions = (options: Options<GetV1WorkspaceActivateInfoData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1WorkspaceActivateInfo({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1WorkspaceActivateInfo',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1WorkspaceActivateMemberOptions = (options: Options<PostV1WorkspaceActivateMemberData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1WorkspaceActivateMember({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1WorkspaceActivateMember',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1WorkspaceActivateMemberMutation: UseMutationOptions<
  PostV1WorkspaceActivateMemberResponse,
  PostV1WorkspaceActivateMemberError,
  Options<PostV1WorkspaceActivateMemberData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1WorkspaceActivateMember({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1AgentByIdOptions = (options: Options<GetV1AgentByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1AgentById({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1AgentById',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const deleteV1AgentByIdOptions = (options: Options<DeleteV1AgentByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await deleteV1AgentById({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'deleteV1AgentById',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const deleteV1AgentByIdMutation: UseMutationOptions<
  DeleteV1AgentByIdResponse,
  DeleteV1AgentByIdError,
  Options<DeleteV1AgentByIdData>
> = {
  mutationFn: async (options) => {
    const { data } = await deleteV1AgentById({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const putV1AgentByIdOptions = (options: Options<PutV1AgentByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await putV1AgentById({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'putV1AgentById',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const putV1AgentByIdMutation: UseMutationOptions<
  PutV1AgentByIdResponse,
  PutV1AgentByIdError,
  Options<PutV1AgentByIdData>
> = {
  mutationFn: async (options) => {
    const { data } = await putV1AgentById({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const postV1AgentAddOptions = (options: Options<PostV1AgentAddData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1AgentAdd({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1AgentAdd',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1AgentAddMutation: UseMutationOptions<
  PostV1AgentAddResponse,
  PostV1AgentAddError,
  Options<PostV1AgentAddData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1AgentAdd({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const postV1AgentEnableShareByIdOptions = (options: Options<PostV1AgentEnableShareByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1AgentEnableShareById({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1AgentEnableShareById',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1AgentEnableShareByIdMutation: UseMutationOptions<
  PostV1AgentEnableShareByIdResponse,
  PostV1AgentEnableShareByIdError,
  Options<PostV1AgentEnableShareByIdData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1AgentEnableShareById({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1ChatStreamOptions = (options: Options<GetV1ChatStreamData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1ChatStream({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1ChatStream',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1ChatInitSessionByAgentIdOptions = (
  options: Options<PostV1ChatInitSessionByAgentIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1ChatInitSessionByAgentId({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1ChatInitSessionByAgentId',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1ChatInitSessionByAgentIdMutation: UseMutationOptions<
  PostV1ChatInitSessionByAgentIdResponse,
  PostV1ChatInitSessionByAgentIdError,
  Options<PostV1ChatInitSessionByAgentIdData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1ChatInitSessionByAgentId({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1UserInfoOptions = (options: Options<GetV1UserInfoData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1UserInfo({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1UserInfo',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const putV1UserUpdateOptions = (options: Options<PutV1UserUpdateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await putV1UserUpdate({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'putV1UserUpdate',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const putV1UserUpdateMutation: UseMutationOptions<
  PutV1UserUpdateResponse,
  PutV1UserUpdateError,
  Options<PutV1UserUpdateData>
> = {
  mutationFn: async (options) => {
    const { data } = await putV1UserUpdate({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const putV1UserUpdatePwdOptions = (options: Options<PutV1UserUpdatePwdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await putV1UserUpdatePwd({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'putV1UserUpdatePwd',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const putV1UserUpdatePwdMutation: UseMutationOptions<
  PutV1UserUpdatePwdResponse,
  PutV1UserUpdatePwdError,
  Options<PutV1UserUpdatePwdData>
> = {
  mutationFn: async (options) => {
    const { data } = await putV1UserUpdatePwd({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1AgentListOptions = (options: Options<GetV1AgentListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1AgentList({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1AgentList',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1ChatInitSessionOptions = (options: Options<PostV1ChatInitSessionData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1ChatInitSession({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1ChatInitSession',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1ChatInitSessionMutation: UseMutationOptions<
  PostV1ChatInitSessionResponse,
  PostV1ChatInitSessionError,
  Options<PostV1ChatInitSessionData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1ChatInitSession({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1ChatRecentAgentOptions = (options: Options<GetV1ChatRecentAgentData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1ChatRecentAgent({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1ChatRecentAgent',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const getV1ChatAgentChatByAgentIdOptions = (options: Options<GetV1ChatAgentChatByAgentIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1ChatAgentChatByAgentId({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1ChatAgentChatByAgentId',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1ChatSendBySessionIdOptions = (options: Options<PostV1ChatSendBySessionIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1ChatSendBySessionId({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1ChatSendBySessionId',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1ChatSendBySessionIdMutation: UseMutationOptions<
  PostV1ChatSendBySessionIdResponse,
  PostV1ChatSendBySessionIdError,
  Options<PostV1ChatSendBySessionIdData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1ChatSendBySessionId({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1AgentAdminListOptions = (options: Options<GetV1AgentAdminListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1AgentAdminList({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1AgentAdminList',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const getV1AgentAdminInfoByIdOptions = (options: Options<GetV1AgentAdminInfoByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1AgentAdminInfoById({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1AgentAdminInfoById',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const putV1AgentReleaseByIdOptions = (options: Options<PutV1AgentReleaseByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await putV1AgentReleaseById({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'putV1AgentReleaseById',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const putV1AgentReleaseByIdMutation: UseMutationOptions<
  PutV1AgentReleaseByIdResponse,
  PutV1AgentReleaseByIdError,
  Options<PutV1AgentReleaseByIdData>
> = {
  mutationFn: async (options) => {
    const { data } = await putV1AgentReleaseById({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const postV1FileUploadOptions = (options: Options<PostV1FileUploadData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1FileUpload({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1FileUpload',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1FileUploadMutation: UseMutationOptions<
  PostV1FileUploadResponse,
  PostV1FileUploadError,
  Options<PostV1FileUploadData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1FileUpload({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1FileDownloadOptions = (options: Options<GetV1FileDownloadData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1FileDownload({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1FileDownload',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1ChatClearSessionOptions = (options: Options<PostV1ChatClearSessionData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1ChatClearSession({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1ChatClearSession',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1ChatClearSessionMutation: UseMutationOptions<
  PostV1ChatClearSessionResponse,
  PostV1ChatClearSessionError,
  Options<PostV1ChatClearSessionData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1ChatClearSession({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const postV1ToolCheckSchemaOptions = (options: Options<PostV1ToolCheckSchemaData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1ToolCheckSchema({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1ToolCheckSchema',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1ToolCheckSchemaMutation: UseMutationOptions<
  PostV1ToolCheckSchemaResponse,
  PostV1ToolCheckSchemaError,
  Options<PostV1ToolCheckSchemaData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1ToolCheckSchema({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const postV1ChatClearDebugRecordOptions = (options: Options<PostV1ChatClearDebugRecordData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1ChatClearDebugRecord({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1ChatClearDebugRecord',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1ChatClearDebugRecordMutation: UseMutationOptions<
  PostV1ChatClearDebugRecordResponse,
  PostV1ChatClearDebugRecordError,
  Options<PostV1ChatClearDebugRecordData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1ChatClearDebugRecord({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const postV1AuthLogoutOptions = (options: Options<PostV1AuthLogoutData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1AuthLogout({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1AuthLogout',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1AuthLogoutMutation: UseMutationOptions<
  PostV1AuthLogoutResponse,
  PostV1AuthLogoutError,
  Options<PostV1AuthLogoutData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1AuthLogout({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1ToolListWithFunctionOptions = (options: Options<GetV1ToolListWithFunctionData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1ToolListWithFunction({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1ToolListWithFunction',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1DatasetAddOptions = (options: Options<PostV1DatasetAddData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1DatasetAdd({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1DatasetAdd',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1DatasetAddMutation: UseMutationOptions<
  PostV1DatasetAddResponse,
  PostV1DatasetAddError,
  Options<PostV1DatasetAddData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1DatasetAdd({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1DatasetByIdOptions = (options: Options<GetV1DatasetByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1DatasetById({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1DatasetById',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const putV1DatasetByIdOptions = (options: Options<PutV1DatasetByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await putV1DatasetById({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'putV1DatasetById',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const putV1DatasetByIdMutation: UseMutationOptions<
  PutV1DatasetByIdResponse,
  PutV1DatasetByIdError,
  Options<PutV1DatasetByIdData>
> = {
  mutationFn: async (options) => {
    const { data } = await putV1DatasetById({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const deleteV1DatasetByIdOptions = (options: Options<DeleteV1DatasetByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await deleteV1DatasetById({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'deleteV1DatasetById',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const deleteV1DatasetByIdMutation: UseMutationOptions<
  DeleteV1DatasetByIdResponse,
  DeleteV1DatasetByIdError,
  Options<DeleteV1DatasetByIdData>
> = {
  mutationFn: async (options) => {
    const { data } = await deleteV1DatasetById({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1DatasetListDatasetsByAgentOptions = (
  options: Options<GetV1DatasetListDatasetsByAgentData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1DatasetListDatasetsByAgent({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1DatasetListDatasetsByAgent',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const putV1DatasetByIdShareOptions = (options: Options<PutV1DatasetByIdShareData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await putV1DatasetByIdShare({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'putV1DatasetByIdShare',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const putV1DatasetByIdShareMutation: UseMutationOptions<
  PutV1DatasetByIdShareResponse,
  PutV1DatasetByIdShareError,
  Options<PutV1DatasetByIdShareData>
> = {
  mutationFn: async (options) => {
    const { data } = await putV1DatasetByIdShare({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1DatasetByIdRetrieveHistoryOptions = (
  options: Options<GetV1DatasetByIdRetrieveHistoryData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1DatasetByIdRetrieveHistory({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1DatasetByIdRetrieveHistory',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1DatasetByDatasetIdDocumentsOptions = (
  options: Options<PostV1DatasetByDatasetIdDocumentsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1DatasetByDatasetIdDocuments({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1DatasetByDatasetIdDocuments',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1DatasetByDatasetIdDocumentsMutation: UseMutationOptions<
  PostV1DatasetByDatasetIdDocumentsResponse,
  PostV1DatasetByDatasetIdDocumentsError,
  Options<PostV1DatasetByDatasetIdDocumentsData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1DatasetByDatasetIdDocuments({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1DatasetByDatasetIdDocumentsOptions = (
  options: Options<GetV1DatasetByDatasetIdDocumentsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1DatasetByDatasetIdDocuments({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1DatasetByDatasetIdDocuments',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const putV1DatasetDocumentsByDocumentIdRenameOptions = (
  options: Options<PutV1DatasetDocumentsByDocumentIdRenameData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await putV1DatasetDocumentsByDocumentIdRename({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'putV1DatasetDocumentsByDocumentIdRename',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const putV1DatasetDocumentsByDocumentIdRenameMutation: UseMutationOptions<
  PutV1DatasetDocumentsByDocumentIdRenameResponse,
  PutV1DatasetDocumentsByDocumentIdRenameError,
  Options<PutV1DatasetDocumentsByDocumentIdRenameData>
> = {
  mutationFn: async (options) => {
    const { data } = await putV1DatasetDocumentsByDocumentIdRename({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const deleteV1DatasetDocumentsByDocumentIdOptions = (
  options: Options<DeleteV1DatasetDocumentsByDocumentIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await deleteV1DatasetDocumentsByDocumentId({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'deleteV1DatasetDocumentsByDocumentId',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const deleteV1DatasetDocumentsByDocumentIdMutation: UseMutationOptions<
  DeleteV1DatasetDocumentsByDocumentIdResponse,
  DeleteV1DatasetDocumentsByDocumentIdError,
  Options<DeleteV1DatasetDocumentsByDocumentIdData>
> = {
  mutationFn: async (options) => {
    const { data } = await deleteV1DatasetDocumentsByDocumentId({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const deleteV1DatasetDocumentsBatchDeleteOptions = (
  options: Options<DeleteV1DatasetDocumentsBatchDeleteData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await deleteV1DatasetDocumentsBatchDelete({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'deleteV1DatasetDocumentsBatchDelete',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const deleteV1DatasetDocumentsBatchDeleteMutation: UseMutationOptions<
  DeleteV1DatasetDocumentsBatchDeleteResponse,
  DeleteV1DatasetDocumentsBatchDeleteError,
  Options<DeleteV1DatasetDocumentsBatchDeleteData>
> = {
  mutationFn: async (options) => {
    const { data } = await deleteV1DatasetDocumentsBatchDelete({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1DatasetDocumentsByDocumentIdSegmentsOptions = (
  options: Options<GetV1DatasetDocumentsByDocumentIdSegmentsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1DatasetDocumentsByDocumentIdSegments({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1DatasetDocumentsByDocumentIdSegments',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1DatasetDocumentsByDocumentIdSegmentsOptions = (
  options: Options<PostV1DatasetDocumentsByDocumentIdSegmentsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1DatasetDocumentsByDocumentIdSegments({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1DatasetDocumentsByDocumentIdSegments',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1DatasetDocumentsByDocumentIdSegmentsMutation: UseMutationOptions<
  PostV1DatasetDocumentsByDocumentIdSegmentsResponse,
  PostV1DatasetDocumentsByDocumentIdSegmentsError,
  Options<PostV1DatasetDocumentsByDocumentIdSegmentsData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1DatasetDocumentsByDocumentIdSegments({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const putV1DatasetDocumentsByDocumentIdEnableOptions = (
  options: Options<PutV1DatasetDocumentsByDocumentIdEnableData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await putV1DatasetDocumentsByDocumentIdEnable({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'putV1DatasetDocumentsByDocumentIdEnable',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const putV1DatasetDocumentsByDocumentIdEnableMutation: UseMutationOptions<
  PutV1DatasetDocumentsByDocumentIdEnableResponse,
  PutV1DatasetDocumentsByDocumentIdEnableError,
  Options<PutV1DatasetDocumentsByDocumentIdEnableData>
> = {
  mutationFn: async (options) => {
    const { data } = await putV1DatasetDocumentsByDocumentIdEnable({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const putV1DatasetSegmentsBySegmentIdEnableOptions = (
  options: Options<PutV1DatasetSegmentsBySegmentIdEnableData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await putV1DatasetSegmentsBySegmentIdEnable({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'putV1DatasetSegmentsBySegmentIdEnable',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const putV1DatasetSegmentsBySegmentIdEnableMutation: UseMutationOptions<
  PutV1DatasetSegmentsBySegmentIdEnableResponse,
  PutV1DatasetSegmentsBySegmentIdEnableError,
  Options<PutV1DatasetSegmentsBySegmentIdEnableData>
> = {
  mutationFn: async (options) => {
    const { data } = await putV1DatasetSegmentsBySegmentIdEnable({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1DatasetDocumentsByDocumentIdSegmentsSearchByTextOptions = (
  options: Options<GetV1DatasetDocumentsByDocumentIdSegmentsSearchByTextData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1DatasetDocumentsByDocumentIdSegmentsSearchByText({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1DatasetDocumentsByDocumentIdSegmentsSearchByText',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const putV1DatasetSegmentsBySegmentIdOptions = (
  options: Options<PutV1DatasetSegmentsBySegmentIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await putV1DatasetSegmentsBySegmentId({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'putV1DatasetSegmentsBySegmentId',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const putV1DatasetSegmentsBySegmentIdMutation: UseMutationOptions<
  PutV1DatasetSegmentsBySegmentIdResponse,
  PutV1DatasetSegmentsBySegmentIdError,
  Options<PutV1DatasetSegmentsBySegmentIdData>
> = {
  mutationFn: async (options) => {
    const { data } = await putV1DatasetSegmentsBySegmentId({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const deleteV1DatasetSegmentsBySegmentIdOptions = (
  options: Options<DeleteV1DatasetSegmentsBySegmentIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await deleteV1DatasetSegmentsBySegmentId({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'deleteV1DatasetSegmentsBySegmentId',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const deleteV1DatasetSegmentsBySegmentIdMutation: UseMutationOptions<
  DeleteV1DatasetSegmentsBySegmentIdResponse,
  DeleteV1DatasetSegmentsBySegmentIdError,
  Options<DeleteV1DatasetSegmentsBySegmentIdData>
> = {
  mutationFn: async (options) => {
    const { data } = await deleteV1DatasetSegmentsBySegmentId({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1DatasetByIdRetrieveOptions = (options: Options<GetV1DatasetByIdRetrieveData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1DatasetByIdRetrieve({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1DatasetByIdRetrieve',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const getV1DatasetByIdApiKeyGenerateOptions = (
  options: Options<GetV1DatasetByIdApiKeyGenerateData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1DatasetByIdApiKeyGenerate({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1DatasetByIdApiKeyGenerate',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1AgentGenerateApiKeyByIdOptions = (options: Options<PostV1AgentGenerateApiKeyByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1AgentGenerateApiKeyById({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1AgentGenerateApiKeyById',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1AgentGenerateApiKeyByIdMutation: UseMutationOptions<
  PostV1AgentGenerateApiKeyByIdResponse,
  PostV1AgentGenerateApiKeyByIdError,
  Options<PostV1AgentGenerateApiKeyByIdData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1AgentGenerateApiKeyById({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const postV1DatasetDocumentsSplitOptions = (options: Options<PostV1DatasetDocumentsSplitData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1DatasetDocumentsSplit({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1DatasetDocumentsSplit',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1DatasetDocumentsSplitMutation: UseMutationOptions<
  PostV1DatasetDocumentsSplitResponse,
  PostV1DatasetDocumentsSplitError,
  Options<PostV1DatasetDocumentsSplitData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1DatasetDocumentsSplit({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const deleteV1DatasetSegmentsBatchDeleteOptions = (
  options: Options<DeleteV1DatasetSegmentsBatchDeleteData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await deleteV1DatasetSegmentsBatchDelete({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'deleteV1DatasetSegmentsBatchDelete',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const deleteV1DatasetSegmentsBatchDeleteMutation: UseMutationOptions<
  DeleteV1DatasetSegmentsBatchDeleteResponse,
  DeleteV1DatasetSegmentsBatchDeleteError,
  Options<DeleteV1DatasetSegmentsBatchDeleteData>
> = {
  mutationFn: async (options) => {
    const { data } = await deleteV1DatasetSegmentsBatchDelete({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1DatasetListOptions = (options: Options<GetV1DatasetListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1DatasetList({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1DatasetList',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1AgentResetSequenceByAgentIdOptions = (
  options: Options<PostV1AgentResetSequenceByAgentIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1AgentResetSequenceByAgentId({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1AgentResetSequenceByAgentId',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1AgentResetSequenceByAgentIdMutation: UseMutationOptions<
  PostV1AgentResetSequenceByAgentIdResponse,
  PostV1AgentResetSequenceByAgentIdError,
  Options<PostV1AgentResetSequenceByAgentIdData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1AgentResetSequenceByAgentId({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1DatasetByIdRetrieveExternalOptions = (
  options: Options<GetV1DatasetByIdRetrieveExternalData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1DatasetByIdRetrieveExternal({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1DatasetByIdRetrieveExternal',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const getV1DatasetRetrieveHistoryByIdOptions = (
  options: Options<GetV1DatasetRetrieveHistoryByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1DatasetRetrieveHistoryById({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1DatasetRetrieveHistoryById',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1UserResetPwdCaptchaOptions = (options: Options<PostV1UserResetPwdCaptchaData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1UserResetPwdCaptcha({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1UserResetPwdCaptcha',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1UserResetPwdCaptchaMutation: UseMutationOptions<
  PostV1UserResetPwdCaptchaResponse,
  PostV1UserResetPwdCaptchaError,
  Options<PostV1UserResetPwdCaptchaData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1UserResetPwdCaptcha({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const postV1UserResetPwdCaptchaVerifyOptions = (
  options: Options<PostV1UserResetPwdCaptchaVerifyData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1UserResetPwdCaptchaVerify({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1UserResetPwdCaptchaVerify',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1UserResetPwdCaptchaVerifyMutation: UseMutationOptions<
  PostV1UserResetPwdCaptchaVerifyResponse,
  PostV1UserResetPwdCaptchaVerifyError,
  Options<PostV1UserResetPwdCaptchaVerifyData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1UserResetPwdCaptchaVerify({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1UserResetPwdByUuidOptions = (options: Options<GetV1UserResetPwdByUuidData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1UserResetPwdByUuid({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1UserResetPwdByUuid',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1UserResetPwdByUuidOptions = (options: Options<PostV1UserResetPwdByUuidData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1UserResetPwdByUuid({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1UserResetPwdByUuid',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1UserResetPwdByUuidMutation: UseMutationOptions<
  PostV1UserResetPwdByUuidResponse,
  PostV1UserResetPwdByUuidError,
  Options<PostV1UserResetPwdByUuidData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1UserResetPwdByUuid({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const postV1ChatAudioTranscriptionsOptions = (options: Options<PostV1ChatAudioTranscriptionsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1ChatAudioTranscriptions({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1ChatAudioTranscriptions',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1ChatAudioTranscriptionsMutation: UseMutationOptions<
  PostV1ChatAudioTranscriptionsResponse,
  PostV1ChatAudioTranscriptionsError,
  Options<PostV1ChatAudioTranscriptionsData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1ChatAudioTranscriptions({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const postV1ChatAudioSpeechOptions = (options: Options<PostV1ChatAudioSpeechData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1ChatAudioSpeech({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1ChatAudioSpeech',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1ChatAudioSpeechMutation: UseMutationOptions<
  PostV1ChatAudioSpeechResponse,
  PostV1ChatAudioSpeechError,
  Options<PostV1ChatAudioSpeechData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1ChatAudioSpeech({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1ChatAudioSpeechOptions = (options: Options<GetV1ChatAudioSpeechData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1ChatAudioSpeech({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1ChatAudioSpeech',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1UserResetPwdConfirmOptions = (options: Options<PostV1UserResetPwdConfirmData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1UserResetPwdConfirm({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1UserResetPwdConfirm',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1UserResetPwdConfirmMutation: UseMutationOptions<
  PostV1UserResetPwdConfirmResponse,
  PostV1UserResetPwdConfirmError,
  Options<PostV1UserResetPwdConfirmData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1UserResetPwdConfirm({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getV1ChatAgentChatOptions = (options: Options<GetV1ChatAgentChatData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1ChatAgentChat({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1ChatAgentChat',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const getV1ModelProvidersOptions = (options: Options<GetV1ModelProvidersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getV1ModelProviders({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getV1ModelProviders',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1ChatStreamBySessionIdOptions = (options: Options<PostV1ChatStreamBySessionIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postV1ChatStreamBySessionId({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'postV1ChatStreamBySessionId',
        params: {
          body: options.body,
          headers: options.headers,
          path: options.path,
          query: options.query,
        },
      },
    ],
  });
};

export const postV1ChatStreamBySessionIdMutation: UseMutationOptions<
  PostV1ChatStreamBySessionIdResponse,
  PostV1ChatStreamBySessionIdError,
  Options<PostV1ChatStreamBySessionIdData>
> = {
  mutationFn: async (options) => {
    const { data } = await postV1ChatStreamBySessionId({
      ...options,
      throwOnError: true,
    });
    return data;
  },
};

export const getApiChatbotV1DeviceListOptions = (options?: Options<GetApiChatbotV1DeviceListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getApiChatbotV1DeviceList({
        ...options,
        ...queryKey[0].params,
        throwOnError: true,
      });
      return data;
    },
    queryKey: [
      {
        scope: 'getApiChatbotV1DeviceList',
        params: {
          body: options?.body,
          headers: options?.headers,
          path: options?.path,
          query: options?.query,
        },
      },
    ],
  });
};
