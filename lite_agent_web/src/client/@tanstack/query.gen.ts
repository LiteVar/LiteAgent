// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import { type UseMutationOptions, queryOptions } from '@tanstack/react-query';
import {
    postV1AuthLogin,
    postV1AuthLoginOfInit,
    getV1AuthInitStatus,
    getV1ToolList,
    getV1ToolDetailById,
    postV1ToolAdd,
    putV1ToolUpdate,
    deleteV1ToolById,
    postV1ToolCheckSchema,
    postV1ModelAdd,
    deleteV1ModelById,
    putV1ModelUpdate,
    getV1ModelList,
    postV1WorkspaceAdd,
    getV1WorkspaceList,
    getV1WorkspaceMemberList,
    postV1WorkspaceMember,
    deleteV1WorkspaceMemberByMemberId,
    putV1WorkspaceMemberByMemberId,
    getV1WorkspaceActivateInfo,
    postV1WorkspaceActivateMember,
    getV1AgentList,
    getV1AgentAdminList,
    getV1AgentById,
    deleteV1AgentById,
    putV1AgentById,
    getV1AgentAdminInfoById,
    postV1AgentAdd,
    postV1AgentEnableShareById,
    putV1AgentReleaseById,
    postV1ChatInitSession,
    getV1ChatStream,
    postV1ChatInitSessionByAgentId,
    postV1ChatStreamBySessionId,
    postV1ChatClearSession,
    postV1ChatSendBySessionId,
    postV1ChatClearDebugRecord,
    getV1ChatRecentAgent,
    getV1ChatAgentChatByAgentId,
    getV1UserInfo,
    putV1UserUpdate,
    putV1UserUpdatePwd,
    postV1FileUpload,
    getV1FileDownload,
} from '../services.gen';
import type {
    PostV1AuthLoginData,
    PostV1AuthLoginError,
    PostV1AuthLoginResponse,
    PostV1AuthLoginOfInitData,
    PostV1AuthLoginOfInitError,
    PostV1AuthLoginOfInitResponse,
    GetV1ToolListData,
    GetV1ToolDetailByIdData,
    PostV1ToolAddData,
    PostV1ToolAddError,
    PostV1ToolAddResponse,
    PutV1ToolUpdateData,
    PutV1ToolUpdateError,
    PutV1ToolUpdateResponse,
    DeleteV1ToolByIdData,
    DeleteV1ToolByIdError,
    DeleteV1ToolByIdResponse,
    PostV1ToolCheckSchemaData,
    PostV1ToolCheckSchemaError,
    PostV1ToolCheckSchemaResponse,
    PostV1ModelAddData,
    PostV1ModelAddError,
    PostV1ModelAddResponse,
    DeleteV1ModelByIdData,
    DeleteV1ModelByIdError,
    DeleteV1ModelByIdResponse,
    PutV1ModelUpdateData,
    PutV1ModelUpdateError,
    PutV1ModelUpdateResponse,
    GetV1ModelListData,
    PostV1WorkspaceAddData,
    PostV1WorkspaceAddError,
    PostV1WorkspaceAddResponse,
    GetV1WorkspaceListData,
    GetV1WorkspaceMemberListData,
    PostV1WorkspaceMemberData,
    PostV1WorkspaceMemberError,
    PostV1WorkspaceMemberResponse,
    DeleteV1WorkspaceMemberByMemberIdData,
    DeleteV1WorkspaceMemberByMemberIdError,
    DeleteV1WorkspaceMemberByMemberIdResponse,
    PutV1WorkspaceMemberByMemberIdData,
    PutV1WorkspaceMemberByMemberIdError,
    PutV1WorkspaceMemberByMemberIdResponse,
    GetV1WorkspaceActivateInfoData,
    PostV1WorkspaceActivateMemberData,
    PostV1WorkspaceActivateMemberError,
    PostV1WorkspaceActivateMemberResponse,
    GetV1AgentListData,
    GetV1AgentAdminListData,
    GetV1AgentByIdData,
    DeleteV1AgentByIdData,
    DeleteV1AgentByIdError,
    DeleteV1AgentByIdResponse,
    PutV1AgentByIdData,
    PutV1AgentByIdError,
    PutV1AgentByIdResponse,
    GetV1AgentAdminInfoByIdData,
    PostV1AgentAddData,
    PostV1AgentAddError,
    PostV1AgentAddResponse,
    PostV1AgentEnableShareByIdData,
    PostV1AgentEnableShareByIdError,
    PostV1AgentEnableShareByIdResponse,
    PutV1AgentReleaseByIdData,
    PutV1AgentReleaseByIdError,
    PutV1AgentReleaseByIdResponse,
    PostV1ChatInitSessionData,
    PostV1ChatInitSessionError,
    PostV1ChatInitSessionResponse,
    GetV1ChatStreamData,
    PostV1ChatInitSessionByAgentIdData,
    PostV1ChatInitSessionByAgentIdError,
    PostV1ChatInitSessionByAgentIdResponse,
    PostV1ChatStreamBySessionIdData,
    PostV1ChatStreamBySessionIdError,
    PostV1ChatStreamBySessionIdResponse,
    PostV1ChatClearSessionData,
    PostV1ChatClearSessionError,
    PostV1ChatClearSessionResponse,
    PostV1ChatSendBySessionIdData,
    PostV1ChatSendBySessionIdError,
    PostV1ChatSendBySessionIdResponse,
    PostV1ChatClearDebugRecordData,
    PostV1ChatClearDebugRecordError,
    PostV1ChatClearDebugRecordResponse,
    GetV1ChatRecentAgentData,
    GetV1ChatAgentChatByAgentIdData,
    GetV1UserInfoData,
    PutV1UserUpdateData,
    PutV1UserUpdateError,
    PutV1UserUpdateResponse,
    PutV1UserUpdatePwdData,
    PutV1UserUpdatePwdError,
    PutV1UserUpdatePwdResponse,
    PostV1FileUploadData,
    PostV1FileUploadError,
    PostV1FileUploadResponse,
    GetV1FileDownloadData,
} from '../types.gen';

export const postV1AuthLoginOptions = (options: Options<PostV1AuthLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await postV1AuthLogin({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'postV1AuthLogin',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const postV1AuthLoginMutation: UseMutationOptions<
    PostV1AuthLoginResponse,
    PostV1AuthLoginError,
    Options<PostV1AuthLoginData>
> = {
    mutationFn: async (options) => {
        const { data } = await postV1AuthLogin({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const postV1AuthLoginOfInitOptions = (options: Options<PostV1AuthLoginOfInitData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await postV1AuthLoginOfInit({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'postV1AuthLoginOfInit',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const postV1AuthLoginOfInitMutation: UseMutationOptions<
    PostV1AuthLoginOfInitResponse,
    PostV1AuthLoginOfInitError,
    Options<PostV1AuthLoginOfInitData>
> = {
    mutationFn: async (options) => {
        const { data } = await postV1AuthLoginOfInit({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const getV1AuthInitStatusOptions = (options?: Options) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await getV1AuthInitStatus({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'getV1AuthInitStatus',
                params: {
                    body: options?.body,
                    headers: options?.headers,
                    path: options?.path,
                    query: options?.query,
                },
            },
        ],
    });
};

export const getV1ToolListOptions = (options: Options<GetV1ToolListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await getV1ToolList({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'getV1ToolList',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const getV1ToolDetailByIdOptions = (options: Options<GetV1ToolDetailByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await getV1ToolDetailById({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'getV1ToolDetailById',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const postV1ToolAddOptions = (options: Options<PostV1ToolAddData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await postV1ToolAdd({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'postV1ToolAdd',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const postV1ToolAddMutation: UseMutationOptions<
    PostV1ToolAddResponse,
    PostV1ToolAddError,
    Options<PostV1ToolAddData>
> = {
    mutationFn: async (options) => {
        const { data } = await postV1ToolAdd({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const putV1ToolUpdateOptions = (options: Options<PutV1ToolUpdateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await putV1ToolUpdate({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'putV1ToolUpdate',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const putV1ToolUpdateMutation: UseMutationOptions<
    PutV1ToolUpdateResponse,
    PutV1ToolUpdateError,
    Options<PutV1ToolUpdateData>
> = {
    mutationFn: async (options) => {
        const { data } = await putV1ToolUpdate({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const deleteV1ToolByIdOptions = (options: Options<DeleteV1ToolByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await deleteV1ToolById({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'deleteV1ToolById',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const deleteV1ToolByIdMutation: UseMutationOptions<
    DeleteV1ToolByIdResponse,
    DeleteV1ToolByIdError,
    Options<DeleteV1ToolByIdData>
> = {
    mutationFn: async (options) => {
        const { data } = await deleteV1ToolById({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const postV1ToolCheckSchemaOptions = (options: Options<PostV1ToolCheckSchemaData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await postV1ToolCheckSchema({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'postV1ToolCheckSchema',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const postV1ToolCheckSchemaMutation: UseMutationOptions<
    PostV1ToolCheckSchemaResponse,
    PostV1ToolCheckSchemaError,
    Options<PostV1ToolCheckSchemaData>
> = {
    mutationFn: async (options) => {
        const { data } = await postV1ToolCheckSchema({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const postV1ModelAddOptions = (options: Options<PostV1ModelAddData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await postV1ModelAdd({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'postV1ModelAdd',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const postV1ModelAddMutation: UseMutationOptions<
    PostV1ModelAddResponse,
    PostV1ModelAddError,
    Options<PostV1ModelAddData>
> = {
    mutationFn: async (options) => {
        const { data } = await postV1ModelAdd({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const deleteV1ModelByIdOptions = (options: Options<DeleteV1ModelByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await deleteV1ModelById({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'deleteV1ModelById',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const deleteV1ModelByIdMutation: UseMutationOptions<
    DeleteV1ModelByIdResponse,
    DeleteV1ModelByIdError,
    Options<DeleteV1ModelByIdData>
> = {
    mutationFn: async (options) => {
        const { data } = await deleteV1ModelById({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const putV1ModelUpdateOptions = (options: Options<PutV1ModelUpdateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await putV1ModelUpdate({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'putV1ModelUpdate',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const putV1ModelUpdateMutation: UseMutationOptions<
    PutV1ModelUpdateResponse,
    PutV1ModelUpdateError,
    Options<PutV1ModelUpdateData>
> = {
    mutationFn: async (options) => {
        const { data } = await putV1ModelUpdate({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const getV1ModelListOptions = (options: Options<GetV1ModelListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await getV1ModelList({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'getV1ModelList',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const postV1WorkspaceAddOptions = (options: Options<PostV1WorkspaceAddData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await postV1WorkspaceAdd({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'postV1WorkspaceAdd',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const postV1WorkspaceAddMutation: UseMutationOptions<
    PostV1WorkspaceAddResponse,
    PostV1WorkspaceAddError,
    Options<PostV1WorkspaceAddData>
> = {
    mutationFn: async (options) => {
        const { data } = await postV1WorkspaceAdd({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const getV1WorkspaceListOptions = (options: Options<GetV1WorkspaceListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await getV1WorkspaceList({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'getV1WorkspaceList',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const getV1WorkspaceMemberListOptions = (options: Options<GetV1WorkspaceMemberListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await getV1WorkspaceMemberList({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'getV1WorkspaceMemberList',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const postV1WorkspaceMemberOptions = (options: Options<PostV1WorkspaceMemberData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await postV1WorkspaceMember({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'postV1WorkspaceMember',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const postV1WorkspaceMemberMutation: UseMutationOptions<
    PostV1WorkspaceMemberResponse,
    PostV1WorkspaceMemberError,
    Options<PostV1WorkspaceMemberData>
> = {
    mutationFn: async (options) => {
        const { data } = await postV1WorkspaceMember({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const deleteV1WorkspaceMemberByMemberIdOptions = (
    options: Options<DeleteV1WorkspaceMemberByMemberIdData>
) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await deleteV1WorkspaceMemberByMemberId({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'deleteV1WorkspaceMemberByMemberId',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const deleteV1WorkspaceMemberByMemberIdMutation: UseMutationOptions<
    DeleteV1WorkspaceMemberByMemberIdResponse,
    DeleteV1WorkspaceMemberByMemberIdError,
    Options<DeleteV1WorkspaceMemberByMemberIdData>
> = {
    mutationFn: async (options) => {
        const { data } = await deleteV1WorkspaceMemberByMemberId({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const putV1WorkspaceMemberByMemberIdOptions = (
    options: Options<PutV1WorkspaceMemberByMemberIdData>
) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await putV1WorkspaceMemberByMemberId({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'putV1WorkspaceMemberByMemberId',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const putV1WorkspaceMemberByMemberIdMutation: UseMutationOptions<
    PutV1WorkspaceMemberByMemberIdResponse,
    PutV1WorkspaceMemberByMemberIdError,
    Options<PutV1WorkspaceMemberByMemberIdData>
> = {
    mutationFn: async (options) => {
        const { data } = await putV1WorkspaceMemberByMemberId({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const getV1WorkspaceActivateInfoOptions = (options: Options<GetV1WorkspaceActivateInfoData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await getV1WorkspaceActivateInfo({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'getV1WorkspaceActivateInfo',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const postV1WorkspaceActivateMemberOptions = (options: Options<PostV1WorkspaceActivateMemberData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await postV1WorkspaceActivateMember({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'postV1WorkspaceActivateMember',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const postV1WorkspaceActivateMemberMutation: UseMutationOptions<
    PostV1WorkspaceActivateMemberResponse,
    PostV1WorkspaceActivateMemberError,
    Options<PostV1WorkspaceActivateMemberData>
> = {
    mutationFn: async (options) => {
        const { data } = await postV1WorkspaceActivateMember({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const getV1AgentListOptions = (options: Options<GetV1AgentListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await getV1AgentList({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'getV1AgentList',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const getV1AgentAdminListOptions = (options: Options<GetV1AgentAdminListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await getV1AgentAdminList({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'getV1AgentAdminList',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const getV1AgentByIdOptions = (options: Options<GetV1AgentByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await getV1AgentById({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'getV1AgentById',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const deleteV1AgentByIdOptions = (options: Options<DeleteV1AgentByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await deleteV1AgentById({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'deleteV1AgentById',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const deleteV1AgentByIdMutation: UseMutationOptions<
    DeleteV1AgentByIdResponse,
    DeleteV1AgentByIdError,
    Options<DeleteV1AgentByIdData>
> = {
    mutationFn: async (options) => {
        const { data } = await deleteV1AgentById({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const putV1AgentByIdOptions = (options: Options<PutV1AgentByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await putV1AgentById({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'putV1AgentById',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const putV1AgentByIdMutation: UseMutationOptions<
    PutV1AgentByIdResponse,
    PutV1AgentByIdError,
    Options<PutV1AgentByIdData>
> = {
    mutationFn: async (options) => {
        const { data } = await putV1AgentById({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const getV1AgentAdminInfoByIdOptions = (options: Options<GetV1AgentAdminInfoByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await getV1AgentAdminInfoById({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'getV1AgentAdminInfoById',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const postV1AgentAddOptions = (options: Options<PostV1AgentAddData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await postV1AgentAdd({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'postV1AgentAdd',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const postV1AgentAddMutation: UseMutationOptions<
    PostV1AgentAddResponse,
    PostV1AgentAddError,
    Options<PostV1AgentAddData>
> = {
    mutationFn: async (options) => {
        const { data } = await postV1AgentAdd({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const postV1AgentEnableShareByIdOptions = (options: Options<PostV1AgentEnableShareByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await postV1AgentEnableShareById({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'postV1AgentEnableShareById',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const postV1AgentEnableShareByIdMutation: UseMutationOptions<
    PostV1AgentEnableShareByIdResponse,
    PostV1AgentEnableShareByIdError,
    Options<PostV1AgentEnableShareByIdData>
> = {
    mutationFn: async (options) => {
        const { data } = await postV1AgentEnableShareById({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const putV1AgentReleaseByIdOptions = (options: Options<PutV1AgentReleaseByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await putV1AgentReleaseById({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'putV1AgentReleaseById',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const putV1AgentReleaseByIdMutation: UseMutationOptions<
    PutV1AgentReleaseByIdResponse,
    PutV1AgentReleaseByIdError,
    Options<PutV1AgentReleaseByIdData>
> = {
    mutationFn: async (options) => {
        const { data } = await putV1AgentReleaseById({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const postV1ChatInitSessionOptions = (options: Options<PostV1ChatInitSessionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await postV1ChatInitSession({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'postV1ChatInitSession',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const postV1ChatInitSessionMutation: UseMutationOptions<
    PostV1ChatInitSessionResponse,
    PostV1ChatInitSessionError,
    Options<PostV1ChatInitSessionData>
> = {
    mutationFn: async (options) => {
        const { data } = await postV1ChatInitSession({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const getV1ChatStreamOptions = (options: Options<GetV1ChatStreamData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await getV1ChatStream({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'getV1ChatStream',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const postV1ChatInitSessionByAgentIdOptions = (
    options: Options<PostV1ChatInitSessionByAgentIdData>
) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await postV1ChatInitSessionByAgentId({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'postV1ChatInitSessionByAgentId',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const postV1ChatInitSessionByAgentIdMutation: UseMutationOptions<
    PostV1ChatInitSessionByAgentIdResponse,
    PostV1ChatInitSessionByAgentIdError,
    Options<PostV1ChatInitSessionByAgentIdData>
> = {
    mutationFn: async (options) => {
        const { data } = await postV1ChatInitSessionByAgentId({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const postV1ChatStreamBySessionIdOptions = (options: Options<PostV1ChatStreamBySessionIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await postV1ChatStreamBySessionId({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'postV1ChatStreamBySessionId',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const postV1ChatStreamBySessionIdMutation: UseMutationOptions<
    PostV1ChatStreamBySessionIdResponse,
    PostV1ChatStreamBySessionIdError,
    Options<PostV1ChatStreamBySessionIdData>
> = {
    mutationFn: async (options) => {
        const { data } = await postV1ChatStreamBySessionId({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const postV1ChatClearSessionOptions = (options: Options<PostV1ChatClearSessionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await postV1ChatClearSession({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'postV1ChatClearSession',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const postV1ChatClearSessionMutation: UseMutationOptions<
    PostV1ChatClearSessionResponse,
    PostV1ChatClearSessionError,
    Options<PostV1ChatClearSessionData>
> = {
    mutationFn: async (options) => {
        const { data } = await postV1ChatClearSession({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const postV1ChatSendBySessionIdOptions = (options: Options<PostV1ChatSendBySessionIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await postV1ChatSendBySessionId({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'postV1ChatSendBySessionId',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const postV1ChatSendBySessionIdMutation: UseMutationOptions<
    PostV1ChatSendBySessionIdResponse,
    PostV1ChatSendBySessionIdError,
    Options<PostV1ChatSendBySessionIdData>
> = {
    mutationFn: async (options) => {
        const { data } = await postV1ChatSendBySessionId({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const postV1ChatClearDebugRecordOptions = (options: Options<PostV1ChatClearDebugRecordData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await postV1ChatClearDebugRecord({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'postV1ChatClearDebugRecord',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const postV1ChatClearDebugRecordMutation: UseMutationOptions<
    PostV1ChatClearDebugRecordResponse,
    PostV1ChatClearDebugRecordError,
    Options<PostV1ChatClearDebugRecordData>
> = {
    mutationFn: async (options) => {
        const { data } = await postV1ChatClearDebugRecord({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const getV1ChatRecentAgentOptions = (options: Options<GetV1ChatRecentAgentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await getV1ChatRecentAgent({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'getV1ChatRecentAgent',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const getV1ChatAgentChatByAgentIdOptions = (options: Options<GetV1ChatAgentChatByAgentIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await getV1ChatAgentChatByAgentId({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'getV1ChatAgentChatByAgentId',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const getV1UserInfoOptions = (options: Options<GetV1UserInfoData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await getV1UserInfo({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'getV1UserInfo',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const putV1UserUpdateOptions = (options: Options<PutV1UserUpdateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await putV1UserUpdate({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'putV1UserUpdate',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const putV1UserUpdateMutation: UseMutationOptions<
    PutV1UserUpdateResponse,
    PutV1UserUpdateError,
    Options<PutV1UserUpdateData>
> = {
    mutationFn: async (options) => {
        const { data } = await putV1UserUpdate({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const putV1UserUpdatePwdOptions = (options: Options<PutV1UserUpdatePwdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await putV1UserUpdatePwd({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'putV1UserUpdatePwd',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const putV1UserUpdatePwdMutation: UseMutationOptions<
    PutV1UserUpdatePwdResponse,
    PutV1UserUpdatePwdError,
    Options<PutV1UserUpdatePwdData>
> = {
    mutationFn: async (options) => {
        const { data } = await putV1UserUpdatePwd({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const postV1FileUploadOptions = (options: Options<PostV1FileUploadData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await postV1FileUpload({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'postV1FileUpload',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};

export const postV1FileUploadMutation: UseMutationOptions<
    PostV1FileUploadResponse,
    PostV1FileUploadError,
    Options<PostV1FileUploadData>
> = {
    mutationFn: async (options) => {
        const { data } = await postV1FileUpload({
            ...options,
            throwOnError: true,
        });
        return data;
    },
};

export const getV1FileDownloadOptions = (options: Options<GetV1FileDownloadData>) => {
    return queryOptions({
        queryFn: async ({ queryKey }) => {
            const { data } = await getV1FileDownload({
                ...options,
                ...queryKey[0].params,
                throwOnError: true,
            });
            return data;
        },
        queryKey: [
            {
                scope: 'getV1FileDownload',
                params: {
                    body: options.body,
                    headers: options.headers,
                    path: options.path,
                    query: options.query,
                },
            },
        ],
    });
};
